[
    {
        "project_name": "Example - Aptos Move",
        "files": [
            {
                "file_name": "dynamic_amm.move",
                "source_code": "Ly8gQ29weXJpZ2h0IChjKSBUYW1hZ28gQmxvY2tjaGFpbiBMYWJzLCBJbmMuCi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQKCi8vIEEgY3VzdG9tIHdlaWdodCBERVggZm9yIHRyYWRpbmcgRkEgdG9rZW5zCgptb2R1bGUgbGVnYXRvX2FkZHI6OmFtbSB7CgogICAgdXNlIHN0ZDo6c2lnbmVyOyAgCiAgICB1c2Ugc3RkOjpzdHJpbmc6OntTZWxmLCBTdHJpbmcsIHV0ZjgsIGJ5dGVzIH07IAogICAgdXNlIHN0ZDo6b3B0aW9uOjp7U2VsZiwgT3B0aW9ufTsKCiAgICB1c2UgYXB0b3NfZnJhbWV3b3JrOjpldmVudDsKICAgIHVzZSBhcHRvc19mcmFtZXdvcms6OmZ1bmdpYmxlX2Fzc2V0Ojp7CiAgICAgICAgU2VsZiwgRnVuZ2libGVBc3NldCwgRnVuZ2libGVTdG9yZSwgTWV0YWRhdGEsCiAgICAgICAgQnVyblJlZiwgTWludFJlZiwgVHJhbnNmZXJSZWYsCiAgICB9OwogICAgdXNlIGFwdG9zX2ZyYW1ld29yazo6b2JqZWN0Ojp7U2VsZiwgQ29uc3RydWN0b3JSZWYsIE9iamVjdCwgRXh0ZW5kUmVmfTsKICAgIHVzZSBhcHRvc19mcmFtZXdvcms6OnByaW1hcnlfZnVuZ2libGVfc3RvcmU7CiAgICB1c2UgYXB0b3Nfc3RkOjpjb21wYXJhdG9yOwogICAgdXNlIGFwdG9zX3N0ZDo6bWF0aDEyODsKICAgIHVzZSBhcHRvc19zdGQ6Om1hdGg2NDsKICAgIHVzZSBhcHRvc19zdGQ6OnNtYXJ0X3ZlY3Rvcjo6e1NlbGYsIFNtYXJ0VmVjdG9yfTsKICAgIHVzZSBhcHRvc19zdGQ6OnRhYmxlOjp7U2VsZiwgVGFibGV9OwogICAgdXNlIGFwdG9zX3N0ZDo6Zml4ZWRfcG9pbnQ2NDo6e1NlbGYsIEZpeGVkUG9pbnQ2NH07IAoKICAgIHVzZSBsZWdhdG9fYWRkcjo6YmFzZV9mdW5naWJsZV9hc3NldDsgCiAgICB1c2UgbGVnYXRvX2FkZHI6OndlaWdodGVkX21hdGg7ICAKCiAgICAvLyA9PT09PT09PSBDb25zdGFudHMgPT09PT09PT0KCiAgICAvLyBEZWZhdWx0IHN3YXAgZmVlIG9mIDAuNSUgaW4gZml4ZWQtcG9pbnQKICAgIGNvbnN0IERFRkFVTFRfRkVFOiB1MTI4ID0gOTIyMzM3MjAzNjg1NDc3NTg7IAogICAgLy8gTWluaW1hbCBsaXF1aWRpdHkuCiAgICBjb25zdCBNSU5JTUFMX0xJUVVJRElUWTogdTY0ID0gMTAwMDsgCgogICAgY29uc3QgV0VJR0hUX1NDQUxFOiB1NjQgPSAxMDAwMDsgCgogICAgY29uc3QgTFBfVE9LRU5fREVDSU1BTFM6IHU4ID0gODsKICAgIC8vIFRoZSBtYXggdmFsdWUgdGhhdCBjYW4gYmUgaGVsZCBpbiBvbmUgb2YgdGhlIEJhbGFuY2VzIG9mCiAgICAvLy8gYSBQb29sLiBVNjQgTUFYIC8gV0VJR0hUX1NDQUxFCiAgICBjb25zdCBNQVhfUE9PTF9WQUxVRSA6IHU2NCA9IDE4NDQ2NzQ0MDczNzA5NTUxNjE1OwoKICAgIC8vID09PT09PT09IEVycm9ycyA9PT09PT09PQoKICAgIGNvbnN0IEVSUl9VTkFVVEhPUklaRUQ6IHU2NCA9IDEwMTsKICAgIGNvbnN0IEVSUl9QT09MX0hBU19SRUdJU1RFUkVEOiB1NjQgPSAxMDI7CiAgICBjb25zdCBFUlJfV0VJR0hUU19TVU06IHU2NCA9IDEwMzsKICAgIGNvbnN0IEVSUl9QT09MX05PVF9SRUdJU1RFUjogdTY0ID0gMTA0OwogICAgY29uc3QgRVJSX0lOVkFMSURfQUREUkVTUzogdTY0ID0gMTA1OwogICAgY29uc3QgRVJSX05PVF9MQlA6IHU2NCA9IDEwNjsKICAgIGNvbnN0IEVSUl9PVkVSTElNSVQ6IHU2NCA9IDEwNzsKICAgIGNvbnN0IEVSUl9JTlNVRkZJQ0lFTlRfQ09JTl9YOiB1NjQgPSAxMDg7CiAgICBjb25zdCBFUlJfSU5TVUZGSUNJRU5UX0NPSU5fWTogdTY0ID0gMTA5OwogICAgY29uc3QgRVJSX1BBVVNFRDogdTY0ID0gMTEwOwogICAgY29uc3QgRVJSX0xJUVVJRF9OT1RfRU5PVUdIOiB1NjQgPSAxMTE7CiAgICBjb25zdCBFUlJfVTY0X09WRVJGTE9XOiB1NjQgPSAxMTI7CiAgICBjb25zdCBFUlJfUE9PTF9GVUxMOiB1NjQgPSAxMTM7CiAgICBjb25zdCBFUlJfWkVST19BTU9VTlQ6IHU2NCA9IDExNDsKICAgIGNvbnN0IEVSUl9JTlNVRkZJQ0lFTlRfQU1PVU5UOiB1NjQgPSAxMTU7CiAgICBjb25zdCBFUlJfUkVTRVJWRVNfRU1QVFk6IHU2NCA9IDExNjsKICAgIGNvbnN0IEVSUl9DT0lOX09VVF9OVU1fTEVTU19USEFOX0VYUEVDVEVEX01JTklNVU06IHU2NCA9IDExNzsKICAgIGNvbnN0IEVSUl9NVVNUX0JFX09SREVSOiB1NjQgPSAxMTg7CiAgICBjb25zdCBFUlJfTk9fWUlFTEQ6IHU2NCA9IDExOTsKICAgIGNvbnN0IEVSUl9OT1RfQUNDRVBUX1ZBVUxUOiB1NjQgPSAxMjA7CgogICAgLy8gPT09PT09PT0gU3RydWN0cyA9PT09PT09PT0KCiAgICAvLyBMaXF1aWRpdHkgcG9vbCB3aXRoIGN1c3RvbSB3ZWlnaHRpbmcgCiAgICBzdHJ1Y3QgUG9vbCBoYXMgc3RvcmUgewogICAgICAgIHRva2VuXzE6IE9iamVjdDxGdW5naWJsZVN0b3JlPiwKICAgICAgICB0b2tlbl8yOiBPYmplY3Q8RnVuZ2libGVTdG9yZT4sCiAgICAgICAgd2VpZ2h0XzE6IHU2NCwgLy8gNTAlIHVzaW5nIDUwMDAKICAgICAgICB3ZWlnaHRfMjogdTY0LCAvLyA1MCUgdXNpbmcgNTAwMAogICAgICAgIG1pbl9saXF1aWRpdHk6IE9iamVjdDxGdW5naWJsZVN0b3JlPiwKICAgICAgICBzd2FwX2ZlZTogRml4ZWRQb2ludDY0LAogICAgICAgIGxwX21pbnQ6IE1pbnRSZWYsCiAgICAgICAgbHBfYnVybjogQnVyblJlZiwKICAgICAgICBscF90cmFuc2ZlcjogVHJhbnNmZXJSZWYsCiAgICAgICAgbHBfbWV0YWRhdGE6IE9iamVjdDxNZXRhZGF0YT4sCiAgICAgICAgaGFzX3BhdXNlZDogYm9vbAogICAgfQoKICAgIC8vIFJlcHJlc2VudHMgdGhlIGdsb2JhbCBzdGF0ZSBvZiB0aGUgQU1NLiAKICAgICNbcmVzb3VyY2VfZ3JvdXBfbWVtYmVyKGdyb3VwID0gYXB0b3NfZnJhbWV3b3JrOjpvYmplY3Q6Ok9iamVjdEdyb3VwKV0KICAgIHN0cnVjdCBBTU1NYW5hZ2VyIGhhcyBrZXkgeyAKICAgICAgICBwb29sX2xpc3Q6IFRhYmxlPFN0cmluZywgUG9vbD4sCiAgICAgICAgd2hpdGVsaXN0OiBTbWFydFZlY3RvcjxhZGRyZXNzPiwgLy8gd2hvIGNhbiBzZXR1cCBhIG5ldyBwb29sCiAgICAgICAgZXh0ZW5kX3JlZjogRXh0ZW5kUmVmLAogICAgICAgIGVuYWJsZV93aGl0ZWxpc3Q6IGJvb2wsCiAgICAgICAgdHJlYXN1cnlfYWRkcmVzczogYWRkcmVzcyAvLyB3aGVyZSBhbGwgZmVlcyBmcm9tIGFsbCBwb29scyB3aWxsIGJlIHNlbnQgZm9yIGZ1cnRoZXIgTFAgc3Rha2luZwogICAgfQoKICAgICNbZXZlbnRdCiAgICAvLy8gRXZlbnQgZW1pdHRlZCB3aGVuIGEgcG9vbCBpcyBjcmVhdGVkLgogICAgc3RydWN0IFJlZ2lzdGVyUG9vbCBoYXMgZHJvcCwgc3RvcmUgeyAKICAgICAgICBwb29sX25hbWU6IFN0cmluZywKICAgICAgICB0b2tlbl8xOiBTdHJpbmcsCiAgICAgICAgdG9rZW5fMjogU3RyaW5nLAogICAgICAgIHdlaWdodF8xOiB1NjQsCiAgICAgICAgd2VpZ2h0XzI6IHU2NAogICAgfQoKICAgICNbZXZlbnRdCiAgICBzdHJ1Y3QgQWRkZWRMaXF1aWRpdHkgaGFzIGRyb3AsIHN0b3JlIHsKICAgICAgICBwb29sX25hbWU6IFN0cmluZywKICAgICAgICB0b2tlbl8xOiBTdHJpbmcsCiAgICAgICAgdG9rZW5fMjogU3RyaW5nLAogICAgICAgIHRva2VuXzFfaW46IHU2NCwKICAgICAgICB0b2tlbl8yX2luOiB1NjQsCiAgICAgICAgbHBfb3V0OiB1NjQKICAgIH0KCiAgICAjW2V2ZW50XQogICAgc3RydWN0IFJlbW92ZWRMaXF1aWRpdHkgaGFzIGRyb3AsIHN0b3JlIHsKICAgICAgICBwb29sX25hbWU6IFN0cmluZywKICAgICAgICBscF9pbjogdTY0LAogICAgICAgIHRva2VuXzE6IFN0cmluZywKICAgICAgICB0b2tlbl8yOiBTdHJpbmcsCiAgICAgICAgdG9rZW5fMV9vdXQ6IHU2NCwKICAgICAgICB0b2tlbl8yX291dDogdTY0CiAgICB9CgogICAgI1tldmVudF0KICAgIHN0cnVjdCBTd2FwcGVkIGhhcyBkcm9wLCBzdG9yZSB7CiAgICAgICAgcG9vbF9uYW1lOiBTdHJpbmcsCiAgICAgICAgdG9rZW5faW46IFN0cmluZywKICAgICAgICB0b2tlbl9vdXQ6IFN0cmluZywKICAgICAgICBhbW91bnRfaW46IHU2NCwKICAgICAgICBhbW91bnRfb3V0OiB1NjQKICAgIH0KCiAgICAvLyBDb25zdHJ1Y3RvciBmb3IgdGhpcyBtb2R1bGUuCiAgICBmdW4gaW5pdF9tb2R1bGUoc2VuZGVyOiAmc2lnbmVyKSB7CiAgICAgICAgbGV0IGNvbnN0cnVjdG9yX3JlZiA9IG9iamVjdDo6Y3JlYXRlX29iamVjdChzaWduZXI6OmFkZHJlc3Nfb2Yoc2VuZGVyKSk7CiAgICAgICAgbGV0IGV4dGVuZF9yZWYgPSBvYmplY3Q6OmdlbmVyYXRlX2V4dGVuZF9yZWYoJmNvbnN0cnVjdG9yX3JlZik7CgogICAgICAgIGxldCB3aGl0ZWxpc3QgPSBzbWFydF92ZWN0b3I6Om5ldygpOwogICAgICAgIHNtYXJ0X3ZlY3Rvcjo6cHVzaF9iYWNrKCZtdXQgd2hpdGVsaXN0LCBzaWduZXI6OmFkZHJlc3Nfb2Yoc2VuZGVyKSk7CgogICAgICAgIG1vdmVfdG8oc2VuZGVyLCBBTU1NYW5hZ2VyIHsgCiAgICAgICAgICAgIHdoaXRlbGlzdCwgCiAgICAgICAgICAgIHBvb2xfbGlzdDogdGFibGU6Om5ldzxTdHJpbmcsIFBvb2w+KCksCiAgICAgICAgICAgIGV4dGVuZF9yZWYsCiAgICAgICAgICAgIGVuYWJsZV93aGl0ZWxpc3Q6IHRydWUsCiAgICAgICAgICAgIHRyZWFzdXJ5X2FkZHJlc3M6IHNpZ25lcjo6YWRkcmVzc19vZihzZW5kZXIpCiAgICAgICAgfSk7CiAgICB9CgogICAgLy8gPT09PT09PT0gRW50cnkgUG9pbnRzID09PT09PT09PQoKICAgIC8vIEVudHJ5IHBvaW50IGZvciB0aGUgYHN3YXBgIG1ldGhvZAogICAgcHVibGljIGVudHJ5IGZ1biBzd2FwKAogICAgICAgIHNlbmRlcjogJnNpZ25lciwKICAgICAgICB0b2tlbl8xOiBPYmplY3Q8TWV0YWRhdGE+LAogICAgICAgIHRva2VuXzI6IE9iamVjdDxNZXRhZGF0YT4sCiAgICAgICAgdG9rZW5faW46IHU2NCwKICAgICAgICB0b2tlbl9vdXRfbWluOiB1NjQKICAgICkgICBhY3F1aXJlcyBBTU1NYW5hZ2VyICB7CgogICAgICAgIGxldCBpc19vcmRlciA9IGlzX29yZGVyKHRva2VuXzEsIHRva2VuXzIpOwoKICAgICAgICBsZXQgdG9rZW5fb3V0ID0gc3dhcF9vdXRfbm9uX2VudHJ5KAogICAgICAgICAgICBzZW5kZXIsCiAgICAgICAgICAgIHRva2VuXzEsCiAgICAgICAgICAgIHRva2VuXzIsCiAgICAgICAgICAgIHRva2VuX2luLAogICAgICAgICAgICB0b2tlbl9vdXRfbWluLAogICAgICAgICAgICBpc19vcmRlcgogICAgICAgICk7CgogICAgICAgIGxldCBhbW91bnRfb3V0ID0gZnVuZ2libGVfYXNzZXQ6OmFtb3VudCgmdG9rZW5fb3V0KTsKCiAgICAgICAgbGV0IGNvbmZpZyA9IGJvcnJvd19nbG9iYWxfbXV0PEFNTU1hbmFnZXI+KEBsZWdhdG9fYWRkcik7CiAgICAgICAgbGV0IHBvb2xfY29uZmlnID0gZ2V0X211dF9wb29sKCAmbXV0IGNvbmZpZy5wb29sX2xpc3QsIHRva2VuXzEsIHRva2VuXzIpOwoKICAgICAgICBwcmltYXJ5X2Z1bmdpYmxlX3N0b3JlOjplbnN1cmVfcHJpbWFyeV9zdG9yZV9leGlzdHMoc2lnbmVyOjphZGRyZXNzX29mKHNlbmRlciksIHRva2VuXzIpOwogICAgICAgIGxldCBzdG9yZSA9IHByaW1hcnlfZnVuZ2libGVfc3RvcmU6OnByaW1hcnlfc3RvcmUoc2lnbmVyOjphZGRyZXNzX29mKHNlbmRlciksIHRva2VuXzIpOwogICAgICAgIGZ1bmdpYmxlX2Fzc2V0OjpkZXBvc2l0KHN0b3JlLCB0b2tlbl9vdXQpOwoKICAgICAgICBsZXQgKGxwX25hbWUsIF8pID0gaWYgKGlzX29yZGVyKSB7CiAgICAgICAgICAgIGdlbmVyYXRlX2xwX25hbWVfYW5kX3N5bWJvbCh0b2tlbl8xLCB0b2tlbl8yKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGdlbmVyYXRlX2xwX25hbWVfYW5kX3N5bWJvbCh0b2tlbl8yLCB0b2tlbl8xKQogICAgICAgIH07CgogICAgICAgIC8vIEVtaXQgYW4gZXZlbnQKICAgICAgICBldmVudDo6ZW1pdChTd2FwcGVkIHsgcG9vbF9uYW1lOiBscF9uYW1lLCB0b2tlbl9pbjogZnVuZ2libGVfYXNzZXQ6OnN5bWJvbCh0b2tlbl8xKSwgdG9rZW5fb3V0OiBmdW5naWJsZV9hc3NldDo6c3ltYm9sKHRva2VuXzIpLCBhbW91bnRfaW46IHRva2VuX2luLCBhbW91bnRfb3V0IH0pOwoKICAgIH0KCiAgICAvLyBSZWdpc3RlciBhIG5ldyBsaXF1aWRpdHkgcG9vbCB3aXRoIGN1c3RvbSB3ZWlnaHRzCiAgICBwdWJsaWMgZW50cnkgZnVuIHJlZ2lzdGVyX3Bvb2woCiAgICAgICAgc2VuZGVyOiAmc2lnbmVyLCAKICAgICAgICB0b2tlbl8xOiBPYmplY3Q8TWV0YWRhdGE+LAogICAgICAgIHRva2VuXzI6IE9iamVjdDxNZXRhZGF0YT4sCiAgICAgICAgd2VpZ2h0XzE6IHU2NCwKICAgICAgICB3ZWlnaHRfMjogdTY0CiAgICApICBhY3F1aXJlcyBBTU1NYW5hZ2VyIHsKICAgICAgICAKICAgICAgICBsZXQgaXNfb3JkZXIgPSBpc19vcmRlcih0b2tlbl8xLCB0b2tlbl8yKTsKCiAgICAgICAgaWYgKCFpc19vcmRlcikgewogICAgICAgICAgICByZWdpc3Rlcl9wb29sKHNlbmRlciwgdG9rZW5fMiwgdG9rZW5fMSwgd2VpZ2h0XzIsIHdlaWdodF8xKTsKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgbGV0IGNvbmZpZyA9IGJvcnJvd19nbG9iYWxfbXV0PEFNTU1hbmFnZXI+KEBsZWdhdG9fYWRkcik7CiAgICAgICAgICAgIGxldCBjb25maWdfb2JqZWN0X3NpZ25lciA9IG9iamVjdDo6Z2VuZXJhdGVfc2lnbmVyX2Zvcl9leHRlbmRpbmcoJmNvbmZpZy5leHRlbmRfcmVmKTsKICAgICAgICAgICAgaWYgKGNvbmZpZy5lbmFibGVfd2hpdGVsaXN0KSB7CiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgY2FsbGVyIGlzIG9uIHRoZSB3aGl0ZWxpc3QKICAgICAgICAgICAgICAgIGFzc2VydCEoIHNtYXJ0X3ZlY3Rvcjo6Y29udGFpbnMoJmNvbmZpZy53aGl0ZWxpc3QsICYoc2lnbmVyOjphZGRyZXNzX29mKHNlbmRlcikpKSAsIEVSUl9VTkFVVEhPUklaRUQpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgbGV0IChscF9uYW1lLCBscF9zeW1ib2wpID0gZ2VuZXJhdGVfbHBfbmFtZV9hbmRfc3ltYm9sKHRva2VuXzEsIHRva2VuXzIpOwoKICAgICAgICAgICAgYXNzZXJ0ISggIXRhYmxlOjpjb250YWlucygmY29uZmlnLnBvb2xfbGlzdCwgbHBfbmFtZSksIEVSUl9QT09MX0hBU19SRUdJU1RFUkVEKTsKCiAgICAgICAgICAgIGxldCBjb25zdHJ1Y3Rvcl9yZWYgPSAmb2JqZWN0OjpjcmVhdGVfbmFtZWRfb2JqZWN0KCZjb25maWdfb2JqZWN0X3NpZ25lciwgKmJ5dGVzKCZscF9zeW1ib2wpICk7CiAgICAgICAgCiAgICAgICAgICAgIGJhc2VfZnVuZ2libGVfYXNzZXQ6OmluaXRpYWxpemUoCiAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rvcl9yZWYsCiAgICAgICAgICAgICAgICAwLCAvKiBtYXhpbXVtX3N1cHBseS4gMCBtZWFucyBubyBtYXhpbXVtICovCiAgICAgICAgICAgICAgICBscF9uYW1lLCAvKiBuYW1lICovCiAgICAgICAgICAgICAgICB1dGY4KGIiTFAiKSwgLyogc3ltYm9sICovCiAgICAgICAgICAgICAgICA4LCAvKiBkZWNpbWFscyAqLwogICAgICAgICAgICAgICAgdXRmOChiImh0dHBzOi8vd3d3LmxlZ2F0by5maW5hbmNlL2Fzc2V0cy9pbWFnZXMvZmF2aWNvbi5pY28iKSwgLyogaWNvbiAqLwogICAgICAgICAgICAgICAgdXRmOChiImh0dHBzOi8vbGVnYXRvLmZpbmFuY2UiKSwgLyogcHJvamVjdCAqLwogICAgICAgICAgICApOwoKICAgICAgICAgICAgbGV0IHBvb2wgPSBpbml0X3Bvb2xfcGFyYW1zKGNvbnN0cnVjdG9yX3JlZiwgdG9rZW5fMSwgdG9rZW5fMiwgd2VpZ2h0XzEsIHdlaWdodF8yLCBmaXhlZF9wb2ludDY0OjpjcmVhdGVfZnJvbV9yYXdfdmFsdWUoIERFRkFVTFRfRkVFICkgKTsKCiAgICAgICAgICAgIC8vIEFkZCB0byB0aGUgdGFibGUuCiAgICAgICAgICAgIHRhYmxlOjphZGQoCiAgICAgICAgICAgICAgICAmbXV0IGNvbmZpZy5wb29sX2xpc3QsCiAgICAgICAgICAgICAgICBscF9uYW1lLAogICAgICAgICAgICAgICAgcG9vbAogICAgICAgICAgICApOwoKICAgICAgICAgICAgIC8vIEVtaXQgYW4gZXZlbnQKICAgICAgICAgICAgZXZlbnQ6OmVtaXQoUmVnaXN0ZXJQb29sIHsgcG9vbF9uYW1lOiBscF9uYW1lLCB0b2tlbl8xIDogZnVuZ2libGVfYXNzZXQ6OnN5bWJvbCh0b2tlbl8xKSwgdG9rZW5fMiA6IGZ1bmdpYmxlX2Fzc2V0OjpzeW1ib2wodG9rZW5fMiksICB3ZWlnaHRfMSwgd2VpZ2h0XzIgfSk7CgogICAgICAgIH07CiAgICAKICAgIH0KCiAgICAvLyBFbnRyeXBvaW50IGZvciB0aGUgYGFkZF9saXF1aWRpdHlgIG1ldGhvZC4KICAgIHB1YmxpYyBlbnRyeSBmdW4gYWRkX2xpcXVpZGl0eSgKICAgICAgICBscF9wcm92aWRlcjogJnNpZ25lciwgCiAgICAgICAgdG9rZW5fMTogT2JqZWN0PE1ldGFkYXRhPiwKICAgICAgICB0b2tlbl8yOiBPYmplY3Q8TWV0YWRhdGE+LAogICAgICAgIGNvaW5feF9hbW91bnQ6IHU2NCwKICAgICAgICBjb2luX3hfbWluOiB1NjQsCiAgICAgICAgY29pbl95X2Ftb3VudDogdTY0LAogICAgICAgIGNvaW5feV9taW46IHU2NAogICAgKSBhY3F1aXJlcyBBTU1NYW5hZ2VyIHsKCiAgICAgICAgbGV0IGlzX29yZGVyID0gaXNfb3JkZXIodG9rZW5fMSwgdG9rZW5fMik7CgogICAgICAgIGlmICghaXNfb3JkZXIpIHsKICAgICAgICAgICAgYWRkX2xpcXVpZGl0eSggbHBfcHJvdmlkZXIsIHRva2VuXzIsIHRva2VuXzEsIGNvaW5feV9hbW91bnQsIGNvaW5feV9taW4sIGNvaW5feF9hbW91bnQsIGNvaW5feF9taW4gKTsKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgbGV0IGNvbmZpZyA9IGJvcnJvd19nbG9iYWxfbXV0PEFNTU1hbmFnZXI+KEBsZWdhdG9fYWRkcik7CiAgICAgICAgICAgIGxldCAobHBfbmFtZSwgXykgPSBnZW5lcmF0ZV9scF9uYW1lX2FuZF9zeW1ib2wodG9rZW5fMSwgdG9rZW5fMik7CiAgICAgICAgICAgIGFzc2VydCEoIHRhYmxlOjpjb250YWlucyggJmNvbmZpZy5wb29sX2xpc3QsIGxwX25hbWUgKSAsIEVSUl9QT09MX05PVF9SRUdJU1RFUik7CgogICAgICAgICAgICBsZXQgcG9vbF9jb25maWcgPSB0YWJsZTo6Ym9ycm93X211dCggJm11dCBjb25maWcucG9vbF9saXN0LCBscF9uYW1lICk7CgogICAgICAgICAgICBsZXQgKG9wdGltYWxfeCwgb3B0aW1hbF95LCBpc19wb29sX2NyZWF0b3IpID0gY2FsY19vcHRpbWFsX2NvaW5fdmFsdWVzKAogICAgICAgICAgICAgICAgcG9vbF9jb25maWcsCiAgICAgICAgICAgICAgICBjb2luX3hfYW1vdW50LAogICAgICAgICAgICAgICAgY29pbl95X2Ftb3VudCwKICAgICAgICAgICAgICAgIGNvaW5feF9taW4sCiAgICAgICAgICAgICAgICBjb2luX3lfbWluCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBhc3NlcnQhKG9wdGltYWxfeCA+PSBjb2luX3hfbWluLCBFUlJfSU5TVUZGSUNJRU5UX0NPSU5fWCk7CiAgICAgICAgICAgIGFzc2VydCEob3B0aW1hbF95ID49IGNvaW5feV9taW4sIEVSUl9JTlNVRkZJQ0lFTlRfQ09JTl9ZKTsKCiAgICAgICAgICAgIGxldCBvcHRpbWFsXzEgPSBwcmltYXJ5X2Z1bmdpYmxlX3N0b3JlOjp3aXRoZHJhdyhscF9wcm92aWRlciwgdG9rZW5fMSwgb3B0aW1hbF94KTsKICAgICAgICAgICAgbGV0IG9wdGltYWxfMiA9IHByaW1hcnlfZnVuZ2libGVfc3RvcmU6OndpdGhkcmF3KGxwX3Byb3ZpZGVyLCB0b2tlbl8yLCBvcHRpbWFsX3kpOwoKICAgICAgICAgICAgbGV0IGxwX3Rva2VucyA9IG1pbnRfbHAoIAogICAgICAgICAgICAgICAgcG9vbF9jb25maWcsCiAgICAgICAgICAgICAgICBvcHRpbWFsXzEsCiAgICAgICAgICAgICAgICBvcHRpbWFsXzIKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIGxldCBscF9vdXQgPSBmdW5naWJsZV9hc3NldDo6YW1vdW50KCZscF90b2tlbnMpOwoKICAgICAgICAgICAgLy8gTFAgdG9rZW5zIG9mIHRoZSBwb29sIGNyZWF0b3IgYXJlIHNlbnQgdG8gdGhlIHRyZWFzdXJ5IGFuZCBtYXkgcmVjZWl2ZSBhbm90aGVyIGZvcm0gb2YgaW5jZW50aXZlcwogICAgICAgICAgICBpZiAoaXNfcG9vbF9jcmVhdG9yKSB7CiAgICAgICAgICAgICAgICBsZXQgdHJlYXN1cnlfYWRkcmVzcyA9IGNvbmZpZy50cmVhc3VyeV9hZGRyZXNzOwogICAgICAgICAgICAgICAgbGV0IGxwX3N0b3JlID0gZW5zdXJlX2xwX3Rva2VuX3N0b3JlKCBwb29sX2NvbmZpZywgdHJlYXN1cnlfYWRkcmVzcyk7CiAgICAgICAgICAgICAgICBmdW5naWJsZV9hc3NldDo6ZGVwb3NpdF93aXRoX3JlZiggJnBvb2xfY29uZmlnLmxwX3RyYW5zZmVyLCBscF9zdG9yZSwgbHBfdG9rZW5zKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxldCBscF9zdG9yZSA9IGVuc3VyZV9scF90b2tlbl9zdG9yZSggcG9vbF9jb25maWcsIHNpZ25lcjo6YWRkcmVzc19vZihscF9wcm92aWRlcikpOwogICAgICAgICAgICAgICAgZnVuZ2libGVfYXNzZXQ6OmRlcG9zaXRfd2l0aF9yZWYoICZwb29sX2NvbmZpZy5scF90cmFuc2ZlciwgbHBfc3RvcmUsIGxwX3Rva2Vucyk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAvLyBFbWl0IGFuIGV2ZW50CiAgICAgICAgICAgIGV2ZW50OjplbWl0KEFkZGVkTGlxdWlkaXR5IHsgcG9vbF9uYW1lOiBscF9uYW1lLCB0b2tlbl8xOiBmdW5naWJsZV9hc3NldDo6c3ltYm9sKHRva2VuXzEpLCB0b2tlbl8yOiBmdW5naWJsZV9hc3NldDo6c3ltYm9sKHRva2VuXzIpLCAgdG9rZW5fMV9pbjogb3B0aW1hbF94LCB0b2tlbl8yX2luOiBvcHRpbWFsX3kgLCBscF9vdXQgIH0pOwogICAgICAgIH07CgogICAgfQoKICAgIC8vIEVudHJ5cG9pbnQgZm9yIHRoZSBgcmVtb3ZlX2xpcXVpZGl0eWAgbWV0aG9kLgogICAgcHVibGljIGVudHJ5IGZ1biByZW1vdmVfbGlxdWlkaXR5KGxwX3Byb3ZpZGVyOiAmc2lnbmVyLCB0b2tlbl8xOiBPYmplY3Q8TWV0YWRhdGE+LCB0b2tlbl8yOiBPYmplY3Q8TWV0YWRhdGE+LCAgbHBfYW1vdW50OiB1NjQpIGFjcXVpcmVzIEFNTU1hbmFnZXIgewoKICAgICAgICBsZXQgaXNfb3JkZXIgPSBpc19vcmRlcih0b2tlbl8xLCB0b2tlbl8yKTsKCiAgICAgICAgaWYgKCFpc19vcmRlcikgewogICAgICAgICAgICByZW1vdmVfbGlxdWlkaXR5KCBscF9wcm92aWRlciwgdG9rZW5fMiwgdG9rZW5fMSwgbHBfYW1vdW50ICk7CiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIGxldCBjb25maWcgPSBib3Jyb3dfZ2xvYmFsX211dDxBTU1NYW5hZ2VyPihAbGVnYXRvX2FkZHIpOwogICAgICAgICAgICBsZXQgY29uZmlnX29iamVjdF9zaWduZXIgPSBvYmplY3Q6OmdlbmVyYXRlX3NpZ25lcl9mb3JfZXh0ZW5kaW5nKCZjb25maWcuZXh0ZW5kX3JlZik7CiAgICAgICAgICAgIGxldCAobHBfbmFtZSwgXykgPSBnZW5lcmF0ZV9scF9uYW1lX2FuZF9zeW1ib2wodG9rZW5fMSwgdG9rZW5fMik7CiAgICAgICAgICAgIGFzc2VydCEoIHRhYmxlOjpjb250YWlucyggJmNvbmZpZy5wb29sX2xpc3QsIGxwX25hbWUgKSAsIEVSUl9QT09MX05PVF9SRUdJU1RFUik7CgogICAgICAgICAgICBsZXQgcG9vbF9jb25maWcgPSB0YWJsZTo6Ym9ycm93X211dCggJm11dCBjb25maWcucG9vbF9saXN0LCBscF9uYW1lICk7CiAgICAgICAgICAgIGFzc2VydCEoIXBvb2xfY29uZmlnLmhhc19wYXVzZWQgLCBFUlJfUEFVU0VEICk7CgogICAgICAgICAgICBsZXQgY29pbl94X291dCA9IDA7CiAgICAgICAgICAgIGxldCBjb2luX3lfb3V0ID0gMDsKCiAgICAgICAgICAgIGxldCBscF90b2tlbl9zdXBwbHkgPSBvcHRpb246OmRlc3Ryb3lfc29tZShmdW5naWJsZV9hc3NldDo6c3VwcGx5KHBvb2xfY29uZmlnLmxwX21ldGFkYXRhKSk7CiAgICAgICAgICAgIGxldCByZXNlcnZlXzEgPSBmdW5naWJsZV9hc3NldDo6YmFsYW5jZShwb29sX2NvbmZpZy50b2tlbl8xKTsKICAgICAgICAgICAgbGV0IHJlc2VydmVfMiA9IGZ1bmdpYmxlX2Fzc2V0OjpiYWxhbmNlKHBvb2xfY29uZmlnLnRva2VuXzIpOwoKICAgICAgICAgICAgbGV0ICh3ZWlnaHRfMSwgd2VpZ2h0XzIgKSA9IHBvb2xfY3VycmVudF93ZWlnaHQocG9vbF9jb25maWcpOwoKICAgICAgICAgICAgKGNvaW5feF9vdXQsIGNvaW5feV9vdXQpID0gd2VpZ2h0ZWRfbWF0aDo6Y29tcHV0ZV93aXRoZHJhd25fY29pbnMoIAogICAgICAgICAgICAgICAgbHBfYW1vdW50LCAKICAgICAgICAgICAgICAgIChscF90b2tlbl9zdXBwbHkgYXMgdTY0KSwgCiAgICAgICAgICAgICAgICByZXNlcnZlXzEsIAogICAgICAgICAgICAgICAgcmVzZXJ2ZV8yLCAKICAgICAgICAgICAgICAgIHdlaWdodF8xLCAKICAgICAgICAgICAgICAgIHdlaWdodF8yCiAgICAgICAgICAgICk7IAoKICAgICAgICAgICAgbGV0IGNvaW5feF93aXRoZHJhd24gPSBmdW5naWJsZV9hc3NldDo6d2l0aGRyYXcoJmNvbmZpZ19vYmplY3Rfc2lnbmVyLCBwb29sX2NvbmZpZy50b2tlbl8xLCBjb2luX3hfb3V0KTsKICAgICAgICAgICAgbGV0IGNvaW5feV93aXRoZHJhd24gPSBmdW5naWJsZV9hc3NldDo6d2l0aGRyYXcoJmNvbmZpZ19vYmplY3Rfc2lnbmVyLCBwb29sX2NvbmZpZy50b2tlbl8yLCBjb2luX3lfb3V0KTsKCiAgICAgICAgICAgIHByaW1hcnlfZnVuZ2libGVfc3RvcmU6OmVuc3VyZV9wcmltYXJ5X3N0b3JlX2V4aXN0cyhzaWduZXI6OmFkZHJlc3Nfb2YobHBfcHJvdmlkZXIpLCB0b2tlbl8xKTsKICAgICAgICAgICAgbGV0IHN0b3JlX3ggPSBwcmltYXJ5X2Z1bmdpYmxlX3N0b3JlOjpwcmltYXJ5X3N0b3JlKHNpZ25lcjo6YWRkcmVzc19vZihscF9wcm92aWRlciksIHRva2VuXzEpOwogICAgICAgICAgICBmdW5naWJsZV9hc3NldDo6ZGVwb3NpdChzdG9yZV94LCBjb2luX3hfd2l0aGRyYXduKTsKCiAgICAgICAgICAgIHByaW1hcnlfZnVuZ2libGVfc3RvcmU6OmVuc3VyZV9wcmltYXJ5X3N0b3JlX2V4aXN0cyhzaWduZXI6OmFkZHJlc3Nfb2YobHBfcHJvdmlkZXIpLCB0b2tlbl8yKTsKICAgICAgICAgICAgbGV0IHN0b3JlX3kgPSBwcmltYXJ5X2Z1bmdpYmxlX3N0b3JlOjpwcmltYXJ5X3N0b3JlKHNpZ25lcjo6YWRkcmVzc19vZihscF9wcm92aWRlciksIHRva2VuXzIpOwogICAgICAgICAgICBmdW5naWJsZV9hc3NldDo6ZGVwb3NpdChzdG9yZV95LCBjb2luX3lfd2l0aGRyYXduKTsKCiAgICAgICAgICAgIGxldCBscF9zdG9yZSA9IGVuc3VyZV9scF90b2tlbl9zdG9yZSggcG9vbF9jb25maWcsIHNpZ25lcjo6YWRkcmVzc19vZihscF9wcm92aWRlcikpOwogICAgICAgICAgICBmdW5naWJsZV9hc3NldDo6YnVybl9mcm9tKCZwb29sX2NvbmZpZy5scF9idXJuLCBscF9zdG9yZSwgbHBfYW1vdW50KTsKCiAgICAgICAgICAgIC8vIEVtaXQgYW4gZXZlbnQKICAgICAgICAgICAgZXZlbnQ6OmVtaXQoUmVtb3ZlZExpcXVpZGl0eSB7IHBvb2xfbmFtZTogbHBfbmFtZSwgIGxwX2luOiBscF9hbW91bnQsIHRva2VuXzE6IGZ1bmdpYmxlX2Fzc2V0OjpzeW1ib2wodG9rZW5fMSksIHRva2VuXzI6IGZ1bmdpYmxlX2Fzc2V0OjpzeW1ib2wodG9rZW5fMiksIHRva2VuXzFfb3V0OiBjb2luX3hfb3V0ICwgdG9rZW5fMl9vdXQ6IGNvaW5feV9vdXQgIH0pOwogICAgICAgIH07CgogICAgfQoKICAgIC8vID09PT09PT09IFB1YmxpYyBGdW5jdGlvbnMgPT09PT09PT09CgogICAgcHVibGljIGZ1biBnZXRfbXV0X3Bvb2wocG9vbF9saXN0OiAmbXV0IFRhYmxlPFN0cmluZywgUG9vbD4sICB0b2tlbl8xOiBPYmplY3Q8TWV0YWRhdGE+LCB0b2tlbl8yOiBPYmplY3Q8TWV0YWRhdGE+KTogJm11dCBQb29sIHsKICAgICAgICAKICAgICAgICBsZXQgaXNfb3JkZXIgPSBpc19vcmRlcih0b2tlbl8xLCB0b2tlbl8yKTsKCiAgICAgICAgaWYgKGlzX29yZGVyKSB7CiAgICAgICAgICAgIGxldCAobHBfbmFtZSwgXykgPSBnZW5lcmF0ZV9scF9uYW1lX2FuZF9zeW1ib2wodG9rZW5fMSwgdG9rZW5fMik7CiAgICAgICAgICAgIGFzc2VydCEoIHRhYmxlOjpjb250YWlucyggcG9vbF9saXN0LCBscF9uYW1lICkgLCBFUlJfUE9PTF9OT1RfUkVHSVNURVIpOwogICAgICAgICAgICB0YWJsZTo6Ym9ycm93X211dCggcG9vbF9saXN0LCBscF9uYW1lICkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsZXQgKGxwX25hbWUsIF8pID0gZ2VuZXJhdGVfbHBfbmFtZV9hbmRfc3ltYm9sKHRva2VuXzIsIHRva2VuXzEpOwogICAgICAgICAgICBhc3NlcnQhKCAgdGFibGU6OmNvbnRhaW5zKCBwb29sX2xpc3QsIGxwX25hbWUgKSAsIEVSUl9QT09MX05PVF9SRUdJU1RFUik7CiAgICAgICAgICAgIHRhYmxlOjpib3Jyb3dfbXV0KCBwb29sX2xpc3QsIGxwX25hbWUgKQogICAgICAgIH0gCiAgICB9CgogICAgI1t2aWV3XQogICAgcHVibGljIGZ1biBpc19vcmRlcih0b2tlbl8xOiBPYmplY3Q8TWV0YWRhdGE+LCB0b2tlbl8yOiBPYmplY3Q8TWV0YWRhdGE+KTogYm9vbCB7CiAgICAgICAgbGV0IHRva2VuXzFfYWRkciA9IG9iamVjdDo6b2JqZWN0X2FkZHJlc3MoJnRva2VuXzEpOwogICAgICAgIGxldCB0b2tlbl8yX2FkZHIgPSBvYmplY3Q6Om9iamVjdF9hZGRyZXNzKCZ0b2tlbl8yKTsKICAgICAgICBjb21wYXJhdG9yOjppc19zbWFsbGVyX3RoYW4oJmNvbXBhcmF0b3I6OmNvbXBhcmUoJnRva2VuXzFfYWRkciwgJnRva2VuXzJfYWRkcikpCiAgICB9CgogICAgI1t2aWV3XQogICAgcHVibGljIGZ1biBnZXRfY29uZmlnX29iamVjdF9hZGRyZXNzKCk6IGFkZHJlc3MgYWNxdWlyZXMgQU1NTWFuYWdlciB7CiAgICAgICAgbGV0IGNvbmZpZyA9IGJvcnJvd19nbG9iYWxfbXV0PEFNTU1hbmFnZXI+KEBsZWdhdG9fYWRkcik7CiAgICAgICAgbGV0IGNvbmZpZ19vYmplY3Rfc2lnbmVyID0gb2JqZWN0OjpnZW5lcmF0ZV9zaWduZXJfZm9yX2V4dGVuZGluZygmY29uZmlnLmV4dGVuZF9yZWYpOwogICAgICAgIHNpZ25lcjo6YWRkcmVzc19vZigmY29uZmlnX29iamVjdF9zaWduZXIpCiAgICB9CgogICAgI1t2aWV3XQogICAgcHVibGljIGZ1biBnZXRfdHJlYXN1cnlfYWRkcmVzcygpOiBhZGRyZXNzIGFjcXVpcmVzIEFNTU1hbmFnZXIgewogICAgICAgIGxldCBjb25maWcgPSBib3Jyb3dfZ2xvYmFsPEFNTU1hbmFnZXI+KEBsZWdhdG9fYWRkcik7CiAgICAgICAgY29uZmlnLnRyZWFzdXJ5X2FkZHJlc3MKICAgIH0KCiAgICAjW3ZpZXddCiAgICBwdWJsaWMgZnVuIGdldF9yZXNlcnZlcyh0b2tlbl8xOiBPYmplY3Q8TWV0YWRhdGE+LCB0b2tlbl8yOiBPYmplY3Q8TWV0YWRhdGE+KSA6ICh1NjQsIHU2NCkgIGFjcXVpcmVzIEFNTU1hbmFnZXIgewogICAgICAgIGxldCBjb25maWcgPSBib3Jyb3dfZ2xvYmFsX211dDxBTU1NYW5hZ2VyPihAbGVnYXRvX2FkZHIpOwogICAgICAgIGxldCBwb29sX2NvbmZpZyA9IGdldF9tdXRfcG9vbCggJm11dCBjb25maWcucG9vbF9saXN0LCB0b2tlbl8xLCB0b2tlbl8yKTsKICAgICAgICBsZXQgaXNfb3JkZXIgPSBpc19vcmRlcih0b2tlbl8xLCB0b2tlbl8yKTsKCiAgICAgICAgaWYgKGlzX29yZGVyKSB7CiAgICAgICAgICAgIChmdW5naWJsZV9hc3NldDo6YmFsYW5jZShwb29sX2NvbmZpZy50b2tlbl8xKSwgZnVuZ2libGVfYXNzZXQ6OmJhbGFuY2UocG9vbF9jb25maWcudG9rZW5fMikpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgKGZ1bmdpYmxlX2Fzc2V0OjpiYWxhbmNlKHBvb2xfY29uZmlnLnRva2VuXzIpLCBmdW5naWJsZV9hc3NldDo6YmFsYW5jZShwb29sX2NvbmZpZy50b2tlbl8xKSkKICAgICAgICB9CiAgICB9CgogICAgI1t2aWV3XQogICAgcHVibGljIGZ1biBnZXRfbHBfbWV0YWRhdGEodG9rZW5fMTogT2JqZWN0PE1ldGFkYXRhPiwgdG9rZW5fMjogT2JqZWN0PE1ldGFkYXRhPik6IE9iamVjdDxNZXRhZGF0YT4gYWNxdWlyZXMgQU1NTWFuYWdlciB7CiAgICAgICAgbGV0IGNvbmZpZyA9IGJvcnJvd19nbG9iYWxfbXV0PEFNTU1hbmFnZXI+KEBsZWdhdG9fYWRkcik7CiAgICAgICAgbGV0IHBvb2wgPSBnZXRfbXV0X3Bvb2woICZtdXQgY29uZmlnLnBvb2xfbGlzdCwgdG9rZW5fMSwgdG9rZW5fMik7CiAgICAgICAgcG9vbC5scF9tZXRhZGF0YQogICAgfQoKICAgICNbdmlld10KICAgIHB1YmxpYyBmdW4gZ2V0X3dlaWdodHModG9rZW5fMTpPYmplY3Q8TWV0YWRhdGE+LCB0b2tlbl8yOk9iamVjdDxNZXRhZGF0YT4pIDogKHU2NCwgdTY0KSBhY3F1aXJlcyBBTU1NYW5hZ2VyIHsKICAgICAgICBsZXQgY29uZmlnID0gYm9ycm93X2dsb2JhbF9tdXQ8QU1NTWFuYWdlcj4oQGxlZ2F0b19hZGRyKTsKICAgICAgICBsZXQgcG9vbF9jb25maWcgPSBnZXRfbXV0X3Bvb2woICZtdXQgY29uZmlnLnBvb2xfbGlzdCwgdG9rZW5fMSwgdG9rZW5fMik7CgogICAgICAgIGxldCAoIHdlaWdodF8xLCB3ZWlnaHRfMiApID0gcG9vbF9jdXJyZW50X3dlaWdodChwb29sX2NvbmZpZyk7CgogICAgICAgICh3ZWlnaHRfMSwgIHdlaWdodF8yKQogICAgfQoKICAgIC8vIENhbGN1bGF0ZSBhbW91bnRzIG5lZWRlZCBmb3IgYWRkaW5nIG5ldyBsaXF1aWRpdHkgZm9yIGJvdGggYFhgIGFuZCBgWWAuCiAgICBwdWJsaWMgZnVuIGNhbGNfb3B0aW1hbF9jb2luX3ZhbHVlcyggCiAgICAgICAgcG9vbDogJlBvb2wsCiAgICAgICAgdG9rZW5fMV9kZXNpcmVkOiB1NjQsCiAgICAgICAgdG9rZW5fMl9kZXNpcmVkOiB1NjQsCiAgICAgICAgdG9rZW5fMV9taW46IHU2NCwKICAgICAgICB0b2tlbl8yX21pbjogdTY0CiAgICApIDogKHU2NCwgdTY0LCBib29sKSAgewoKICAgICAgICBsZXQgcmVzZXJ2ZXNfMSA9IGZ1bmdpYmxlX2Fzc2V0OjpiYWxhbmNlKHBvb2wudG9rZW5fMSk7CiAgICAgICAgbGV0IHJlc2VydmVzXzIgPSBmdW5naWJsZV9hc3NldDo6YmFsYW5jZShwb29sLnRva2VuXzIpOwoKICAgICAgICBpZiAocmVzZXJ2ZXNfMSA9PSAwICYmIHJlc2VydmVzXzIgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gKHRva2VuXzFfZGVzaXJlZCwgdG9rZW5fMl9kZXNpcmVkLCB0cnVlKQogICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICBsZXQgKHdlaWdodF8xLCB3ZWlnaHRfMiApID0gcG9vbF9jdXJyZW50X3dlaWdodChwb29sKTsKCiAgICAgICAgICAgIGxldCB0b2tlbl8yX25lZWRlZCA9IHdlaWdodGVkX21hdGg6OmNvbXB1dGVfb3B0aW1hbF92YWx1ZSh0b2tlbl8xX2Rlc2lyZWQsIHJlc2VydmVzXzIsIHdlaWdodF8yLCByZXNlcnZlc18xLCB3ZWlnaHRfMSApOwoKICAgICAgICAgICAgaWYgKHRva2VuXzJfbmVlZGVkIDw9IHRva2VuXzJfZGVzaXJlZCkgewogICAgICAgICAgICAgICAgYXNzZXJ0ISh0b2tlbl8yX25lZWRlZCA+PSB0b2tlbl8yX21pbiwgRVJSX0lOU1VGRklDSUVOVF9DT0lOX1kpOwogICAgICAgICAgICAgICAgcmV0dXJuICh0b2tlbl8xX2Rlc2lyZWQsIHRva2VuXzJfbmVlZGVkLCBmYWxzZSkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxldCB0b2tlbl8xX25lZWRlZCA9ICB3ZWlnaHRlZF9tYXRoOjpjb21wdXRlX29wdGltYWxfdmFsdWUodG9rZW5fMl9kZXNpcmVkLCByZXNlcnZlc18xLCB3ZWlnaHRfMSwgcmVzZXJ2ZXNfMiwgd2VpZ2h0XzIpOwogICAgICAgICAgICAgICAgYXNzZXJ0ISh0b2tlbl8xX25lZWRlZCA8PSB0b2tlbl8xX2Rlc2lyZWQsIEVSUl9PVkVSTElNSVQpOwogICAgICAgICAgICAgICAgYXNzZXJ0ISh0b2tlbl8xX25lZWRlZCA+PSB0b2tlbl8xX21pbiwgRVJSX0lOU1VGRklDSUVOVF9DT0lOX1gpOwogICAgICAgICAgICAgICAgcmV0dXJuICh0b2tlbl8xX25lZWRlZCwgdG9rZW5fMl9kZXNpcmVkLCBmYWxzZSkKICAgICAgICAgICAgfSAgCgogICAgICAgIH0KIAogICAgfQoKICAgIC8vIFJldHJpZXZlIHRoZSBjdXJyZW50IHdlaWdodHMgb2YgdGhlIHBvb2wKICAgIHB1YmxpYyBmdW4gcG9vbF9jdXJyZW50X3dlaWdodChwb29sOiAmUG9vbCApOiAodTY0LCB1NjQpICB7CiAgICAgICAgKCBwb29sLndlaWdodF8xLCBwb29sLndlaWdodF8yICkKICAgIH0KCiAgICBwdWJsaWMgZnVuIHN3YXBfb3V0X25vbl9lbnRyeSggCiAgICAgICAgc2VuZGVyOiAmc2lnbmVyLCAKICAgICAgICB0b2tlbl8xOiBPYmplY3Q8TWV0YWRhdGE+LAogICAgICAgIHRva2VuXzI6IE9iamVjdDxNZXRhZGF0YT4sCiAgICAgICAgdG9rZW5faW46IHU2NCwKICAgICAgICB0b2tlbl9vdXRfbWluOiB1NjQsCiAgICAgICAgaXNfb3JkZXI6IGJvb2wKICAgICkgOiBGdW5naWJsZUFzc2V0IGFjcXVpcmVzIEFNTU1hbmFnZXIgewogICAgICAgIGFzc2VydCEocHJpbWFyeV9mdW5naWJsZV9zdG9yZTo6YmFsYW5jZShzaWduZXI6OmFkZHJlc3Nfb2Yoc2VuZGVyKSwgdG9rZW5fMSkgPj0gdG9rZW5faW4sIEVSUl9JTlNVRkZJQ0lFTlRfQU1PVU5UICk7CgogICAgICAgIGxldCBjb25maWcgPSBib3Jyb3dfZ2xvYmFsX211dDxBTU1NYW5hZ2VyPihAbGVnYXRvX2FkZHIpOwogICAgICAgIGxldCBjb25maWdfb2JqZWN0X3NpZ25lciA9IG9iamVjdDo6Z2VuZXJhdGVfc2lnbmVyX2Zvcl9leHRlbmRpbmcoJmNvbmZpZy5leHRlbmRfcmVmKTsKCiAgICAgICAgbGV0IHBvb2xfY29uZmlnID0gZ2V0X211dF9wb29sKCAmbXV0IGNvbmZpZy5wb29sX2xpc3QsICB0b2tlbl8xLCB0b2tlbl8yKTsKCiAgICAgICAgYXNzZXJ0ISghcG9vbF9jb25maWcuaGFzX3BhdXNlZCAsIEVSUl9QQVVTRUQgKTsKCiAgICAgICAgaWYgKGlzX29yZGVyKSB7CgogICAgICAgICAgICBsZXQgcmVzZXJ2ZV9pbiA9IGZ1bmdpYmxlX2Fzc2V0OjpiYWxhbmNlKHBvb2xfY29uZmlnLnRva2VuXzEpOwogICAgICAgICAgICBsZXQgcmVzZXJ2ZV9vdXQgPSBmdW5naWJsZV9hc3NldDo6YmFsYW5jZShwb29sX2NvbmZpZy50b2tlbl8yKTsKICAgICAgICAgICAgYXNzZXJ0IShyZXNlcnZlX2luID4gMCAmJiByZXNlcnZlX291dCA+IDAsIEVSUl9SRVNFUlZFU19FTVBUWSk7CgogICAgICAgICAgICBsZXQgKGNvaW5feF9hZnRlcl9mZWVzLCBjb2luX3hfZmVlKSA9IHdlaWdodGVkX21hdGg6OmdldF9mZWVfdG9fdHJlYXN1cnkoIHBvb2xfY29uZmlnLnN3YXBfZmVlICwgdG9rZW5faW4pOwoKICAgICAgICAgICAgLy8gT2J0YWluIHRoZSBjdXJyZW50IHdlaWdodHMgb2YgdGhlIHBvb2wKICAgICAgICAgICAgbGV0ICh3ZWlnaHRfaW4sIHdlaWdodF9vdXQpID0gcG9vbF9jdXJyZW50X3dlaWdodChwb29sX2NvbmZpZyk7CgogICAgICAgICAgICBsZXQgdG9rZW5fMl9vdXQgPSBnZXRfYW1vdW50X291dCggCiAgICAgICAgICAgICAgICBjb2luX3hfYWZ0ZXJfZmVlcywKICAgICAgICAgICAgICAgIHJlc2VydmVfaW4sCiAgICAgICAgICAgICAgICB3ZWlnaHRfaW4sIAogICAgICAgICAgICAgICAgcmVzZXJ2ZV9vdXQsCiAgICAgICAgICAgICAgICB3ZWlnaHRfb3V0CiAgICAgICAgICAgICk7CgogICAgICAgICAgICBhc3NlcnQhKAogICAgICAgICAgICAgICAgdG9rZW5fMl9vdXQgPj0gdG9rZW5fb3V0X21pbiwKICAgICAgICAgICAgICAgIEVSUl9DT0lOX09VVF9OVU1fTEVTU19USEFOX0VYUEVDVEVEX01JTklNVU0KICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIGxldCB0b2tlbl9pbl9jb2luID0gcHJpbWFyeV9mdW5naWJsZV9zdG9yZTo6d2l0aGRyYXcoc2VuZGVyLCB0b2tlbl8xLCB0b2tlbl9pbik7CiAgICAgICAgICAgIGxldCBmZWVfaW5fY29pbiA9IGZ1bmdpYmxlX2Fzc2V0OjpleHRyYWN0KCZtdXQgdG9rZW5faW5fY29pbiwgY29pbl94X2ZlZSk7CgogICAgICAgICAgICBmdW5naWJsZV9hc3NldDo6ZGVwb3NpdChwb29sX2NvbmZpZy50b2tlbl8xLCB0b2tlbl9pbl9jb2luKTsKCiAgICAgICAgICAgIC8vIHNlbmQgZmVlcyB0byB0cmVhc3VyeQogICAgICAgICAgICBwcmltYXJ5X2Z1bmdpYmxlX3N0b3JlOjplbnN1cmVfcHJpbWFyeV9zdG9yZV9leGlzdHMoY29uZmlnLnRyZWFzdXJ5X2FkZHJlc3MsIHRva2VuXzEpOwogICAgICAgICAgICBsZXQgc3RvcmUgPSBwcmltYXJ5X2Z1bmdpYmxlX3N0b3JlOjpwcmltYXJ5X3N0b3JlKGNvbmZpZy50cmVhc3VyeV9hZGRyZXNzLCB0b2tlbl8xKTsKICAgICAgICAgICAgZnVuZ2libGVfYXNzZXQ6OmRlcG9zaXQoc3RvcmUsIGZlZV9pbl9jb2luKTsKCiAgICAgICAgICAgIC8vIHNlbmQgb3V0IHRva2VuLTIKICAgICAgICAgICAgZnVuZ2libGVfYXNzZXQ6OndpdGhkcmF3KCZjb25maWdfb2JqZWN0X3NpZ25lciwgcG9vbF9jb25maWcudG9rZW5fMiwgdG9rZW5fMl9vdXQpCgogICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICBsZXQgcmVzZXJ2ZV9pbiA9IGZ1bmdpYmxlX2Fzc2V0OjpiYWxhbmNlKHBvb2xfY29uZmlnLnRva2VuXzIpOwogICAgICAgICAgICBsZXQgcmVzZXJ2ZV9vdXQgPSBmdW5naWJsZV9hc3NldDo6YmFsYW5jZShwb29sX2NvbmZpZy50b2tlbl8xKTsKICAgICAgICAgICAgYXNzZXJ0IShyZXNlcnZlX2luID4gMCAmJiByZXNlcnZlX291dCA+IDAsIEVSUl9SRVNFUlZFU19FTVBUWSk7CgogICAgICAgICAgICBsZXQgKGNvaW5feV9hZnRlcl9mZWVzLCBjb2luX3lfZmVlKSA9ICB3ZWlnaHRlZF9tYXRoOjpnZXRfZmVlX3RvX3RyZWFzdXJ5KCBwb29sX2NvbmZpZy5zd2FwX2ZlZSAsIHRva2VuX2luKTsKCiAgICAgICAgICAgIC8vIE9idGFpbiB0aGUgY3VycmVudCB3ZWlnaHRzIG9mIHRoZSBwb29sCiAgICAgICAgICAgIGxldCAod2VpZ2h0X291dCwgd2VpZ2h0X2luKSA9IHBvb2xfY3VycmVudF93ZWlnaHQocG9vbF9jb25maWcpOwoKICAgICAgICAgICAgbGV0IHRva2VuXzJfb3V0ID0gZ2V0X2Ftb3VudF9vdXQoIAogICAgICAgICAgICAgICAgY29pbl95X2FmdGVyX2ZlZXMsCiAgICAgICAgICAgICAgICByZXNlcnZlX2luLAogICAgICAgICAgICAgICAgd2VpZ2h0X2luLAogICAgICAgICAgICAgICAgcmVzZXJ2ZV9vdXQsCiAgICAgICAgICAgICAgICB3ZWlnaHRfb3V0CiAgICAgICAgICAgICk7CgogICAgICAgICAgICBhc3NlcnQhKAogICAgICAgICAgICAgICAgdG9rZW5fMl9vdXQgPj0gdG9rZW5fb3V0X21pbiwKICAgICAgICAgICAgICAgIEVSUl9DT0lOX09VVF9OVU1fTEVTU19USEFOX0VYUEVDVEVEX01JTklNVU0KICAgICAgICAgICAgKTsKCgogICAgICAgICAgICBsZXQgdG9rZW5faW5fY29pbiA9IHByaW1hcnlfZnVuZ2libGVfc3RvcmU6OndpdGhkcmF3KHNlbmRlciwgdG9rZW5fMSwgdG9rZW5faW4pOwogICAgICAgICAgICBsZXQgZmVlX2luX2NvaW4gPSBmdW5naWJsZV9hc3NldDo6ZXh0cmFjdCgmbXV0IHRva2VuX2luX2NvaW4sIGNvaW5feV9mZWUpOwoKICAgICAgICAgICAgZnVuZ2libGVfYXNzZXQ6OmRlcG9zaXQocG9vbF9jb25maWcudG9rZW5fMiwgdG9rZW5faW5fY29pbik7CgogICAgICAgICAgICAvLyBzZW5kIGZlZXMgdG8gdHJlYXN1cnkKICAgICAgICAgICAgcHJpbWFyeV9mdW5naWJsZV9zdG9yZTo6ZW5zdXJlX3ByaW1hcnlfc3RvcmVfZXhpc3RzKGNvbmZpZy50cmVhc3VyeV9hZGRyZXNzLCB0b2tlbl8xKTsKICAgICAgICAgICAgbGV0IHN0b3JlID0gcHJpbWFyeV9mdW5naWJsZV9zdG9yZTo6cHJpbWFyeV9zdG9yZShjb25maWcudHJlYXN1cnlfYWRkcmVzcywgdG9rZW5fMSk7CiAgICAgICAgICAgIGZ1bmdpYmxlX2Fzc2V0OjpkZXBvc2l0KHN0b3JlLCBmZWVfaW5fY29pbik7CgogICAgICAgICAgICAvLyBzZW5kIG91dCB0b2tlbi0yCiAgICAgICAgICAgIGZ1bmdpYmxlX2Fzc2V0Ojp3aXRoZHJhdygmY29uZmlnX29iamVjdF9zaWduZXIsIHBvb2xfY29uZmlnLnRva2VuXzEsIHRva2VuXzJfb3V0KQoKICAgICAgICB9CiAgICB9CgogICAgLy8gPT09PT09PT0gT25seSBHb3Zlcm5hbmNlID09PT09PT09PQoKICAgIC8vIEFkZHMgYSB1c2VyIHRvIHRoZSB3aGl0ZWxpc3QKICAgIHB1YmxpYyBlbnRyeSBmdW4gYWRkX3doaXRlbGlzdChzZW5kZXI6ICZzaWduZXIsIHdoaXRlbGlzdF9hZGRyZXNzOiBhZGRyZXNzKSBhY3F1aXJlcyBBTU1NYW5hZ2VyIHsKICAgICAgICBhc3NlcnQhKCBzaWduZXI6OmFkZHJlc3Nfb2Yoc2VuZGVyKSA9PSBAbGVnYXRvX2FkZHIgLCBFUlJfVU5BVVRIT1JJWkVEKTsKICAgICAgICBsZXQgY29uZmlnID0gYm9ycm93X2dsb2JhbF9tdXQ8QU1NTWFuYWdlcj4oQGxlZ2F0b19hZGRyKTsKICAgICAgICBhc3NlcnQhKCAhc21hcnRfdmVjdG9yOjpjb250YWlucygmY29uZmlnLndoaXRlbGlzdCwgJndoaXRlbGlzdF9hZGRyZXNzKSAsIEVSUl9JTlZBTElEX0FERFJFU1MpOwogICAgICAgIHNtYXJ0X3ZlY3Rvcjo6cHVzaF9iYWNrKCZtdXQgY29uZmlnLndoaXRlbGlzdCwgd2hpdGVsaXN0X2FkZHJlc3MpOwogICAgfQoKICAgIC8vIFJlbW92ZXMgYSB1c2VyIGZyb20gdGhlIHdoaXRlbGlzdAogICAgcHVibGljIGVudHJ5IGZ1biByZW1vdmVfd2hpdGVsaXN0KHNlbmRlcjogJnNpZ25lciwgd2hpdGVsaXN0X2FkZHJlc3M6IGFkZHJlc3MpIGFjcXVpcmVzIEFNTU1hbmFnZXIgewogICAgICAgIGFzc2VydCEoIHNpZ25lcjo6YWRkcmVzc19vZihzZW5kZXIpID09IEBsZWdhdG9fYWRkciAsIEVSUl9VTkFVVEhPUklaRUQpOwogICAgICAgIGxldCBjb25maWcgPSBib3Jyb3dfZ2xvYmFsX211dDxBTU1NYW5hZ2VyPihAbGVnYXRvX2FkZHIpOwogICAgICAgIGxldCAoZm91bmQsIGlkeCkgPSBzbWFydF92ZWN0b3I6OmluZGV4X29mPGFkZHJlc3M+KCZjb25maWcud2hpdGVsaXN0LCAmd2hpdGVsaXN0X2FkZHJlc3MpOwogICAgICAgIGFzc2VydCEoICBmb3VuZCAsIEVSUl9JTlZBTElEX0FERFJFU1MpOwogICAgICAgIHNtYXJ0X3ZlY3Rvcjo6c3dhcF9yZW1vdmU8YWRkcmVzcz4oJm11dCBjb25maWcud2hpdGVsaXN0LCBpZHggKTsKICAgIH0KCiAgICAvLyBVcGRhdGUgdHJlYXN1cnkgYWRkcmVzcwogICAgcHVibGljIGVudHJ5IGZ1biB1cGRhdGVfdHJlYXN1cnlfYWRkcmVzcyhzZW5kZXI6ICZzaWduZXIsIG5ld19hZGRyZXNzOiBhZGRyZXNzKSBhY3F1aXJlcyBBTU1NYW5hZ2VyIHsKICAgICAgICBhc3NlcnQhKCBzaWduZXI6OmFkZHJlc3Nfb2Yoc2VuZGVyKSA9PSBAbGVnYXRvX2FkZHIgLCBFUlJfVU5BVVRIT1JJWkVEKTsKICAgICAgICBsZXQgY29uZmlnID0gYm9ycm93X2dsb2JhbF9tdXQ8QU1NTWFuYWdlcj4oQGxlZ2F0b19hZGRyKTsKICAgICAgICBjb25maWcudHJlYXN1cnlfYWRkcmVzcyA9IG5ld19hZGRyZXNzOwogICAgfQoKICAgIC8vIEVuYWJsZSBvciBkaXNhYmxlIHdoaXRlbGlzdCByZXF1aXJlbWVudAogICAgcHVibGljIGVudHJ5IGZ1biBlbmFibGVfd2hpdGVsaXN0KHNlbmRlcjogJnNpZ25lciwgaXNfZW5hYmxlOiBib29sKSBhY3F1aXJlcyBBTU1NYW5hZ2VyIHsKICAgICAgICBhc3NlcnQhKCBzaWduZXI6OmFkZHJlc3Nfb2Yoc2VuZGVyKSA9PSBAbGVnYXRvX2FkZHIgLCBFUlJfVU5BVVRIT1JJWkVEKTsKICAgICAgICBsZXQgY29uZmlnID0gYm9ycm93X2dsb2JhbF9tdXQ8QU1NTWFuYWdlcj4oQGxlZ2F0b19hZGRyKTsKICAgICAgICBjb25maWcuZW5hYmxlX3doaXRlbGlzdCA9IGlzX2VuYWJsZTsKICAgIH0KCiAgICAvLyBVcGRhdGVzIHRoZSBzd2FwIGZlZSBmb3IgdGhlIHNwZWNpZmllZCBwb29sCiAgICBwdWJsaWMgZW50cnkgZnVuIHVwZGF0ZV9wb29sX2ZlZShzZW5kZXI6ICZzaWduZXIsIHRva2VuXzE6IE9iamVjdDxNZXRhZGF0YT4sIHRva2VuXzI6IE9iamVjdDxNZXRhZGF0YT4sIGZlZV9udW1lcmF0b3I6IHUxMjgsIGZlZV9kZW5vbWluYXRvcjogdTEyOCkgYWNxdWlyZXMgQU1NTWFuYWdlciB7CiAgICAgICAgYXNzZXJ0ISggc2lnbmVyOjphZGRyZXNzX29mKHNlbmRlcikgPT0gQGxlZ2F0b19hZGRyICwgRVJSX1VOQVVUSE9SSVpFRCk7CiAgICAgICAgCiAgICAgICAgbGV0IGNvbmZpZyA9IGJvcnJvd19nbG9iYWxfbXV0PEFNTU1hbmFnZXI+KEBsZWdhdG9fYWRkcik7CiAgICAgICAgbGV0IHBvb2xfY29uZmlnID0gZ2V0X211dF9wb29sKCAmbXV0IGNvbmZpZy5wb29sX2xpc3QsICB0b2tlbl8xLCB0b2tlbl8yICk7CiAgICAgICAgcG9vbF9jb25maWcuc3dhcF9mZWUgPSBmaXhlZF9wb2ludDY0OjpjcmVhdGVfZnJvbV9yYXRpb25hbCggZmVlX251bWVyYXRvciwgZmVlX2Rlbm9taW5hdG9yICk7CiAgICB9CgogICAgLy8gUGF1c2UvVW5wYXVzZSB0aGUgTFAgcG9vbAogICAgcHVibGljIGVudHJ5IGZ1biBwYXVzZShzZW5kZXI6ICZzaWduZXIsIHRva2VuXzE6IE9iamVjdDxNZXRhZGF0YT4sIHRva2VuXzI6IE9iamVjdDxNZXRhZGF0YT4sIGlzX3BhdXNlOiBib29sKSBhY3F1aXJlcyBBTU1NYW5hZ2VyIHsKICAgICAgICBhc3NlcnQhKCBzaWduZXI6OmFkZHJlc3Nfb2Yoc2VuZGVyKSA9PSBAbGVnYXRvX2FkZHIgLCBFUlJfVU5BVVRIT1JJWkVEKTsKICAgICAgICAKICAgICAgICBsZXQgY29uZmlnID0gYm9ycm93X2dsb2JhbF9tdXQ8QU1NTWFuYWdlcj4oQGxlZ2F0b19hZGRyKTsKICAgICAgICBsZXQgcG9vbF9jb25maWcgPSBnZXRfbXV0X3Bvb2woICZtdXQgY29uZmlnLnBvb2xfbGlzdCwgIHRva2VuXzEsIHRva2VuXzIgKTsKICAgICAgICBwb29sX2NvbmZpZy5oYXNfcGF1c2VkID0gaXNfcGF1c2UKICAgIH0KCiAgICAvLyA9PT09PT09PSBJbnRlcm5hbCBGdW5jdGlvbnMgPT09PT09PT09CgogICAgZnVuIGdlbmVyYXRlX2xwX25hbWVfYW5kX3N5bWJvbCh0b2tlbl8xOiBPYmplY3Q8TWV0YWRhdGE+LCB0b2tlbl8yOiBPYmplY3Q8TWV0YWRhdGE+KTogIChTdHJpbmcsIFN0cmluZykgewogICAgICAgIGxldCBscF9uYW1lID0gc3RyaW5nOjp1dGY4KGIiIik7CiAgICAgICAgc3RyaW5nOjphcHBlbmRfdXRmOCgmbXV0IGxwX25hbWUsIGIiTFAtIik7CiAgICAgICAgc3RyaW5nOjphcHBlbmQoJm11dCBscF9uYW1lLCBmdW5naWJsZV9hc3NldDo6c3ltYm9sKHRva2VuXzEpKTsKICAgICAgICBzdHJpbmc6OmFwcGVuZF91dGY4KCZtdXQgbHBfbmFtZSwgYiItIik7CiAgICAgICAgc3RyaW5nOjphcHBlbmQoJm11dCBscF9uYW1lLCBmdW5naWJsZV9hc3NldDo6c3ltYm9sKHRva2VuXzIpKTsKCiAgICAgICAgbGV0IGxwX3N5bWJvbCA9IHN0cmluZzo6dXRmOChiIiIpOwogICAgICAgIHN0cmluZzo6YXBwZW5kKCZtdXQgbHBfc3ltYm9sLCBmdW5naWJsZV9hc3NldDo6c3ltYm9sKHRva2VuXzEpKTsKICAgICAgICBzdHJpbmc6OmFwcGVuZF91dGY4KCZtdXQgbHBfc3ltYm9sLCBiIi0iKTsKICAgICAgICBzdHJpbmc6OmFwcGVuZCgmbXV0IGxwX3N5bWJvbCwgZnVuZ2libGVfYXNzZXQ6OnN5bWJvbCh0b2tlbl8yKSk7CgogICAgICAgIChscF9uYW1lLCBscF9zeW1ib2wpCiAgICB9CgogICAgZnVuIGluaXRfcG9vbF9wYXJhbXMoY29uc3RydWN0b3JfcmVmOiAmQ29uc3RydWN0b3JSZWYsIHRva2VuXzE6IE9iamVjdDxNZXRhZGF0YT4sIHRva2VuXzI6IE9iamVjdDxNZXRhZGF0YT4sIHdlaWdodF8xOiB1NjQsIHdlaWdodF8yOiB1NjQsIHN3YXBfZmVlOiBGaXhlZFBvaW50NjQpIDogUG9vbCB7CiAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIG5vcm1hbGl6ZWQgd2VpZ2h0cyBzdW0gdXAgdG8gMTAwJQogICAgICAgIGFzc2VydCEoIHdlaWdodF8xK3dlaWdodF8yID09IDEwMDAwLCBFUlJfV0VJR0hUU19TVU0pOyAKICAgICAgICAKICAgICAgICBsZXQgcG9vbF9zaWduZXIgPSAmb2JqZWN0OjpnZW5lcmF0ZV9zaWduZXIoY29uc3RydWN0b3JfcmVmKTsKCiAgICAgICAgbGV0IGxwX21pbnQgPSBmdW5naWJsZV9hc3NldDo6Z2VuZXJhdGVfbWludF9yZWYoY29uc3RydWN0b3JfcmVmKTsKICAgICAgICBsZXQgbHBfYnVybiA9IGZ1bmdpYmxlX2Fzc2V0OjpnZW5lcmF0ZV9idXJuX3JlZihjb25zdHJ1Y3Rvcl9yZWYpOwogICAgICAgIGxldCBscF90cmFuc2ZlciA9IGZ1bmdpYmxlX2Fzc2V0OjpnZW5lcmF0ZV90cmFuc2Zlcl9yZWYoY29uc3RydWN0b3JfcmVmKTsKICAgICAgICBsZXQgbHBfbWV0YWRhdGEgPSBvYmplY3Q6Om9iamVjdF9mcm9tX2NvbnN0cnVjdG9yX3JlZjxNZXRhZGF0YT4oY29uc3RydWN0b3JfcmVmKTsKCiAgICAgICAgUG9vbCB7CiAgICAgICAgICAgIHRva2VuXzE6IGNyZWF0ZV90b2tlbl9zdG9yZShwb29sX3NpZ25lciwgdG9rZW5fMSkgLAogICAgICAgICAgICB0b2tlbl8yOiBjcmVhdGVfdG9rZW5fc3RvcmUocG9vbF9zaWduZXIsIHRva2VuXzIpLAogICAgICAgICAgICB3ZWlnaHRfMSwKICAgICAgICAgICAgd2VpZ2h0XzIsCiAgICAgICAgICAgIG1pbl9saXF1aWRpdHk6IGNyZWF0ZV90b2tlbl9zdG9yZShwb29sX3NpZ25lciwgbHBfbWV0YWRhdGEpLAogICAgICAgICAgICBzd2FwX2ZlZSwKICAgICAgICAgICAgbHBfbWludCwKICAgICAgICAgICAgbHBfYnVybiwKICAgICAgICAgICAgbHBfdHJhbnNmZXIsCiAgICAgICAgICAgIGxwX21ldGFkYXRhLAogICAgICAgICAgICBoYXNfcGF1c2VkOiBmYWxzZQogICAgICAgIH0KICAgIH0KCiAgICAvLyBtaW50IExQIHRva2VucwogICAgZnVuIG1pbnRfbHAocG9vbF9jb25maWc6ICZtdXQgUG9vbCwgZnVuZ2libGVfYXNzZXRfMTogRnVuZ2libGVBc3NldCwgZnVuZ2libGVfYXNzZXRfMjogRnVuZ2libGVBc3NldCkgOiBGdW5naWJsZUFzc2V0IHsKCiAgICAgICAgYXNzZXJ0ISghcG9vbF9jb25maWcuaGFzX3BhdXNlZCAsIEVSUl9QQVVTRUQgKTsKICAgICAgICAKICAgICAgICBsZXQgYW1vdW50XzEgPSBmdW5naWJsZV9hc3NldDo6YW1vdW50KCZmdW5naWJsZV9hc3NldF8xKTsKICAgICAgICBsZXQgYW1vdW50XzIgPSBmdW5naWJsZV9hc3NldDo6YW1vdW50KCZmdW5naWJsZV9hc3NldF8yKTsKCiAgICAgICAgLy8gUmV0cmlldmVzIHRvdGFsIExQIGNvaW5zIHN1cHBseQogICAgICAgIGxldCBscF90b2tlbl9zdXBwbHkgPSBvcHRpb246OmRlc3Ryb3lfc29tZShmdW5naWJsZV9hc3NldDo6c3VwcGx5KHBvb2xfY29uZmlnLmxwX21ldGFkYXRhKSk7CiAgICAgICAgbGV0IHJlc2VydmVfMSA9IGZ1bmdpYmxlX2Fzc2V0OjpiYWxhbmNlKHBvb2xfY29uZmlnLnRva2VuXzEpOwogICAgICAgIGxldCByZXNlcnZlXzIgPSBmdW5naWJsZV9hc3NldDo6YmFsYW5jZShwb29sX2NvbmZpZy50b2tlbl8yKTsKCiAgICAgICAgLy8gQ29tcHV0ZXMgcHJvdmlkZWQgbGlxdWlkaXR5CiAgICAgICAgbGV0IHByb3ZpZGVkX2xpcSA9IGNhbGN1bGF0ZV9wcm92aWRlZF9saXEoIHBvb2xfY29uZmlnLCAobHBfdG9rZW5fc3VwcGx5IGFzIHU2NCksIHJlc2VydmVfMSwgcmVzZXJ2ZV8yLCBhbW91bnRfMSwgYW1vdW50XzIgICk7CgogICAgICAgIC8vIERlcG9zaXQgdGhlIHJlY2VpdmVkIGxpcXVpZGl0eSBpbnRvIHRoZSBwb29sLgogICAgICAgIGZ1bmdpYmxlX2Fzc2V0OjpkZXBvc2l0KHBvb2xfY29uZmlnLnRva2VuXzEsIGZ1bmdpYmxlX2Fzc2V0XzEpOwogICAgICAgIGZ1bmdpYmxlX2Fzc2V0OjpkZXBvc2l0KHBvb2xfY29uZmlnLnRva2VuXzIsIGZ1bmdpYmxlX2Fzc2V0XzIpOwogICAgICAgIAogICAgICAgIGFzc2VydCEoIGZ1bmdpYmxlX2Fzc2V0OjpiYWxhbmNlKHBvb2xfY29uZmlnLnRva2VuXzEpIDwgTUFYX1BPT0xfVkFMVUUsIEVSUl9QT09MX0ZVTEwpOwogICAgICAgIGFzc2VydCEoIGZ1bmdpYmxlX2Fzc2V0OjpiYWxhbmNlKHBvb2xfY29uZmlnLnRva2VuXzIpIDwgTUFYX1BPT0xfVkFMVUUsIEVSUl9QT09MX0ZVTEwpOwoKICAgICAgICBmdW5naWJsZV9hc3NldDo6bWludCgmcG9vbF9jb25maWcubHBfbWludCwgcHJvdmlkZWRfbGlxKQogICAgfQoKICAgIC8vIENhbGN1bGF0ZXMgdGhlIHByb3ZpZGVkIGxpcXVpZGl0eSBiYXNlZCBvbiB0aGUgY3VycmVudCBMUCBzdXBwbHkgYW5kIHJlc2VydmVzLgogICAgZnVuIGNhbGN1bGF0ZV9wcm92aWRlZF9saXEocG9vbF9jb25maWc6ICZtdXQgUG9vbCwgbHBfc3VwcGx5OiB1NjQsIGNvaW5feF9yZXNlcnZlOiB1NjQsIGNvaW5feV9yZXNlcnZlOiB1NjQsIG9wdGltYWxfY29pbl94OiB1NjQsIG9wdGltYWxfY29pbl95OiB1NjQpOiB1NjQgewoKICAgICAgICAvLyBPYnRhaW4gdGhlIGN1cnJlbnQgd2VpZ2h0cyBvZiB0aGUgcG9vbAogICAgICAgIGxldCAod2VpZ2h0XzEsIHdlaWdodF8yICkgPSBwb29sX2N1cnJlbnRfd2VpZ2h0KHBvb2xfY29uZmlnKTsKCiAgICAgICAgaWYgKDAgPT0gbHBfc3VwcGx5KSB7CgogICAgICAgICAgICBsZXQgaW5pdGlhbF9saXEgPSB3ZWlnaHRlZF9tYXRoOjpjb21wdXRlX2luaXRpYWxfbHAoIHdlaWdodF8xLCB3ZWlnaHRfMiAsIG9wdGltYWxfY29pbl94ICwgb3B0aW1hbF9jb2luX3kgICk7CiAgICAgICAgICAgIGFzc2VydCEoaW5pdGlhbF9saXEgPiBNSU5JTUFMX0xJUVVJRElUWSwgRVJSX0xJUVVJRF9OT1RfRU5PVUdIKTsKCiAgICAgICAgICAgIGxldCBscF90b2tlbnMgPSBmdW5naWJsZV9hc3NldDo6bWludCgmcG9vbF9jb25maWcubHBfbWludCwgTUlOSU1BTF9MSVFVSURJVFkpOwoKICAgICAgICAgICAgZnVuZ2libGVfYXNzZXQ6OmRlcG9zaXQocG9vbF9jb25maWcubWluX2xpcXVpZGl0eSwgbHBfdG9rZW5zKTsKCiAgICAgICAgICAgIGluaXRpYWxfbGlxIC0gTUlOSU1BTF9MSVFVSURJVFkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB3ZWlnaHRlZF9tYXRoOjpjb21wdXRlX2Rlcml2ZV9scCggb3B0aW1hbF9jb2luX3gsIG9wdGltYWxfY29pbl95LCB3ZWlnaHRfMSwgd2VpZ2h0XzIsIGNvaW5feF9yZXNlcnZlLCBjb2luX3lfcmVzZXJ2ZSwgbHBfc3VwcGx5ICkKICAgICAgICB9CiAgICB9CgogICAgZnVuIGdldF9hbW91bnRfb3V0KGNvaW5faW46IHU2NCwgcmVzZXJ2ZV9pbjogdTY0LCB3ZWlnaHRfaW46IHU2NCwgcmVzZXJ2ZV9vdXQ6IHU2NCwgd2VpZ2h0X291dDogdTY0KSA6IHU2NCB7CiAgICAgICAgd2VpZ2h0ZWRfbWF0aDo6Z2V0X2Ftb3VudF9vdXQoCiAgICAgICAgICAgICAgICBjb2luX2luLAogICAgICAgICAgICAgICAgcmVzZXJ2ZV9pbiwKICAgICAgICAgICAgICAgIHdlaWdodF9pbiwgCiAgICAgICAgICAgICAgICByZXNlcnZlX291dCwKICAgICAgICAgICAgICAgIHdlaWdodF9vdXQsIAogICAgICAgICAgICApCiAgICB9CgogICAgZnVuIGVuc3VyZV9scF90b2tlbl9zdG9yZShwb29sX2NvbmZpZzogJlBvb2wsIGxwOiBhZGRyZXNzICk6IE9iamVjdDxGdW5naWJsZVN0b3JlPiB7CiAgICAgICAgcHJpbWFyeV9mdW5naWJsZV9zdG9yZTo6ZW5zdXJlX3ByaW1hcnlfc3RvcmVfZXhpc3RzKGxwLCAgcG9vbF9jb25maWcubHBfbWV0YWRhdGEpOwogICAgICAgIGxldCBzdG9yZSA9IHByaW1hcnlfZnVuZ2libGVfc3RvcmU6OnByaW1hcnlfc3RvcmUobHAsICBwb29sX2NvbmZpZy5scF9tZXRhZGF0YSk7CiAgICAgICAgaWYgKCFmdW5naWJsZV9hc3NldDo6aXNfZnJvemVuKHN0b3JlKSkgewogICAgICAgICAgICAvLyBMUHMgbXVzdCBjYWxsIHRyYW5zZmVyIGhlcmUgdG8gdHJhbnNmZXIgdGhlIExQIHRva2VucyBzbyBjbGFpbWFibGUgZmVlcyBjYW4gYmUgdXBkYXRlZCBjb3JyZWN0bHkuCiAgICAgICAgICAgIGZ1bmdpYmxlX2Fzc2V0OjpzZXRfZnJvemVuX2ZsYWcoJnBvb2xfY29uZmlnLmxwX3RyYW5zZmVyLCBzdG9yZSwgdHJ1ZSk7CiAgICAgICAgfTsKICAgICAgICBzdG9yZQogICAgfQoKICAgIGlubGluZSBmdW4gY3JlYXRlX3Rva2VuX3N0b3JlKHBvb2xfc2lnbmVyOiAmc2lnbmVyLCB0b2tlbjogT2JqZWN0PE1ldGFkYXRhPik6IE9iamVjdDxGdW5naWJsZVN0b3JlPiB7CiAgICAgICAgbGV0IGNvbnN0cnVjdG9yX3JlZiA9ICZvYmplY3Q6OmNyZWF0ZV9vYmplY3RfZnJvbV9vYmplY3QocG9vbF9zaWduZXIpOwogICAgICAgIGZ1bmdpYmxlX2Fzc2V0OjpjcmVhdGVfc3RvcmUoY29uc3RydWN0b3JfcmVmLCB0b2tlbikKICAgIH0KCiAgICAvLyA9PT09PT09PSBUZXN0LXJlbGF0ZWQgRnVuY3Rpb25zID09PT09PT09PQoKICAgICNbdGVzdF9vbmx5XSAKICAgIHB1YmxpYyBmdW4gaW5pdF9tb2R1bGVfZm9yX3Rlc3RpbmcoZGVwbG95ZXI6ICZzaWduZXIpIHsKICAgICAgICBpbml0X21vZHVsZShkZXBsb3llcikKICAgIH0KCgp9"
            },
            {
                "file_name": "fa_asset.move",
                "source_code": ""
            },
            {
                "file_name": "legacy_coin.move",
                "source_code": "Cgptb2R1bGUgYXB0b3NfZXhhbXBsZTo6YXB0b3NfbGVnYWN5X2NvaW4gewoKICAgIHVzZSBzdGQ6OnNpZ25lcjsKICAgIHVzZSBzdGQ6OnN0cmluZzo6e1NlbGYgfTsgIAoKICAgIHVzZSBhcHRvc19mcmFtZXdvcms6OmNvaW46OntTZWxmLCBNaW50Q2FwYWJpbGl0eSwgQnVybkNhcGFiaWxpdHl9OyAKCiAgICBjb25zdCBUT0tFTl9OQU1FOiB2ZWN0b3I8dTg+ID0gYiJNb2NrIExlZ2FjeSBUb2tlbiI7CgogICAgc3RydWN0IE1PQ0tfVE9LRU4gaGFzIGRyb3AsIHN0b3JlIHt9CgogICAgc3RydWN0IE1vY2tNYW5hZ2VyIGhhcyBrZXkgewogICAgICAgIG1pbnRfY2FwOiBNaW50Q2FwYWJpbGl0eTxNT0NLX1RPS0VOPiwKICAgICAgICBidXJuX2NhcDogQnVybkNhcGFiaWxpdHk8TU9DS19UT0tFTj4KICAgIH0KCiAgICBmdW4gaW5pdF9tb2R1bGUoc2VuZGVyOiAmc2lnbmVyKSB7CgogICAgICAgIGxldCB0b2tlbl9uYW1lID0gc3RyaW5nOjp1dGY4KGIiTW9jayBMZWdhY3kgVG9rZW4iKTsKICAgICAgICBsZXQgdG9rZW5fc3ltYm9sID0gc3RyaW5nOjp1dGY4KGIiTU9DSyIpOwoKICAgICAgICBsZXQgKGJ1cm5fY2FwLCBmcmVlemVfY2FwLCBtaW50X2NhcCkgPSBjb2luOjppbml0aWFsaXplPE1PQ0tfVE9LRU4+KHNlbmRlciwgdG9rZW5fbmFtZSwgdG9rZW5fc3ltYm9sLCA4LCB0cnVlKTsKICAgICAgICBjb2luOjpkZXN0cm95X2ZyZWV6ZV9jYXAoZnJlZXplX2NhcCk7CgogICAgICAgIG1vdmVfdG8oIHNlbmRlciwgTW9ja01hbmFnZXIgeyAKICAgICAgICAgICAgbWludF9jYXAsCiAgICAgICAgICAgIGJ1cm5fY2FwCiAgICAgICAgfSk7CiAgICB9CgogICAgcHVibGljIGVudHJ5IGZ1biBtaW50KHNlbmRlcjogJnNpZ25lciAsIGFtb3VudDogdTY0KSBhY3F1aXJlcyBNb2NrTWFuYWdlciB7CiAgICAgICAgbGV0IG1vY2tfbWFuYWdlciA9IGJvcnJvd19nbG9iYWxfbXV0PE1vY2tNYW5hZ2VyPihAbW9ja19hZGRyKTsKICAgICAgICBsZXQgY29pbnMgPSBjb2luOjptaW50PE1PQ0tfVE9LRU4+KGFtb3VudCwgJm1vY2tfbWFuYWdlci5taW50X2NhcCApOwoKICAgICAgICBsZXQgc2VuZGVyX2FkZHJlc3MgPSBzaWduZXI6OmFkZHJlc3Nfb2Yoc2VuZGVyKTsKCiAgICAgICAgaWYgKCFjb2luOjppc19hY2NvdW50X3JlZ2lzdGVyZWQ8TU9DS19UT0tFTj4oc2VuZGVyX2FkZHJlc3MpKSB7CiAgICAgICAgICAgIGNvaW46OnJlZ2lzdGVyPE1PQ0tfVE9LRU4+KHNlbmRlcik7CiAgICAgICAgfTsKICAgICAgICBjb2luOjpkZXBvc2l0KHNlbmRlcl9hZGRyZXNzLCBjb2lucyk7CiAgICB9CgogICAgcHVibGljIGVudHJ5IGZ1biBidXJuKHNlbmRlcjogJnNpZ25lciwgYW1vdW50OiB1NjQpICBhY3F1aXJlcyBNb2NrTWFuYWdlciB7CiAgICAgICAgbGV0IG1vY2tfbWFuYWdlciA9IGJvcnJvd19nbG9iYWxfbXV0PE1vY2tNYW5hZ2VyPihAbW9ja19hZGRyKTsKCiAgICAgICAgbGV0IGJ1cm5fY29pbiA9IGNvaW46OndpdGhkcmF3PE1PQ0tfVE9LRU4+KHNlbmRlciwgYW1vdW50KTsKICAgICAgICBjb2luOjpidXJuKGJ1cm5fY29pbiwgJm1vY2tfbWFuYWdlci5idXJuX2NhcCk7CiAgICB9CgogICAgLy8gPT09PT09PT0gVGVzdC1yZWxhdGVkIEZ1bmN0aW9ucyA9PT09PT09PT0KCiAgICAjW3Rlc3Rfb25seV0gCiAgICBwdWJsaWMgZnVuIGluaXRfbW9kdWxlX2Zvcl90ZXN0aW5nKHNlbmRlcjogJnNpZ25lcikgewogICAgICAgIGluaXRfbW9kdWxlKHNlbmRlcikKICAgIH0KCn0="
            },
            {
                "file_name": "polling.move",
                "source_code": "DQptb2R1bGUgYXB0b3NfZXhhbXBsZTo6YXB0b3NfcG9sbGluZyB7DQoNCiAgICB1c2UgYXB0b3NfZnJhbWV3b3JrOjpzaWduZXI7DQogICAgdXNlIHN0ZDo6YWNjb3VudDsNCiAgICAvLy8gRXJyb3IgY29kZXMNCg0KICAgIHN0cnVjdCBQb2xsIGhhcyBzdG9yZSxrZXl7DQogICAgICAgIHZpZXdQb2ludDogdmVjdG9yPHU4PiwNCiAgICAgICAgdG90YWxWb3Rlczp1NjQsDQogICAgICAgIHRydWVWb3RlczogdTY0DQogICAgfQ0KDQogICAgcHVibGljIGZ1biBhc3NlcnRfaXNfb3duZXIoYWRkcjogYWRkcmVzcykgew0KICAgICAgICBhc3NlcnQhKGFkZHIgPT0gQG15X2FkZHJ4LCAwKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuIGFzc2VydF9pc19pbml0aWFsaXplZChhZGRyOiBhZGRyZXNzKSB7DQogICAgICAgIGFzc2VydCEoZXhpc3RzPFBvbGw+KGFkZHIpLCAxKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuIGFzc2VydF91bmluaXRpYWxpemVkKGFkZHI6IGFkZHJlc3MpIHsNCiAgICAgICAgYXNzZXJ0ISghZXhpc3RzPFBvbGw+KGFkZHIpLCAzKTsNCiAgICB9ICAgDQoNCiAgICBwdWJsaWMgZnVuIGluaXRpYWxpemUoYWNjOiAmc2lnbmVyLCBtc2c6IHZlY3Rvcjx1OD4pew0KICAgICAgICBsZXQgYWRkciA9IHNpZ25lcjo6YWRkcmVzc19vZihhY2MpOw0KDQogICAgICAgIGFzc2VydF9pc19vd25lcihhZGRyKTsNCiAgICAgICAgYXNzZXJ0X3VuaW5pdGlhbGl6ZWQoYWRkcik7DQoNCiAgICAgICAgbGV0IGJfc3RvcmUgPSBQb2xsew0KICAgICAgICAgICAgdmlld1BvaW50IDogbXNnLA0KICAgICAgICAgICAgdG90YWxWb3RlczogMCwNCiAgICAgICAgICAgIHRydWVWb3RlczogMCwNCiAgICAgICAgICAgIH07DQogICAgICAgIG1vdmVfdG8oYWNjLCBiX3N0b3JlKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuIHZvdGUoYWNjX293bjogJnNpZ25lciwgc3RvcmVfYWRkcjogYWRkcmVzcyxfdm90ZTpib29sIClhY3F1aXJlcyBQb2xsew0KICAgICAgICBsZXQgYWRkciA9IHNpZ25lcjo6YWRkcmVzc19vZihhY2Nfb3duKTsNCiAgICAgICAgDQogICAgICAgIGFzc2VydF91bmluaXRpYWxpemVkKGFkZHIpOw0KDQogICAgICAgIGxldCBvcF9zdG9yZSA9IGJvcnJvd19nbG9iYWxfbXV0PFBvbGw+KHN0b3JlX2FkZHIpOw0KICAgICAgICBvcF9zdG9yZS50b3RhbFZvdGVzID0gb3Bfc3RvcmUudG90YWxWb3RlcyArIDE7DQoNCiAgICAgICAgaWYoX3ZvdGUgPT0gdHJ1ZSl7DQogICAgICAgICAgICBvcF9zdG9yZS50cnVlVm90ZXMgPSAgb3Bfc3RvcmUudHJ1ZVZvdGVzICsgMTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW4gY3VycmVudFN0YW5kaW5ncyhzdG9yZV9hZGRyOiBhZGRyZXNzKTp1NjQgYWNxdWlyZXMgUG9sbHsNCiAgICAgICAgbGV0IG9wX3N0b3JlID0gYm9ycm93X2dsb2JhbF9tdXQ8UG9sbD4oc3RvcmVfYWRkcik7DQogICAgICAgIHJldHVybiAob3Bfc3RvcmUudHJ1ZVZvdGVzKjEwMC9vcF9zdG9yZS50b3RhbFZvdGVzKjEwMCkvMTAwDQogICAgfQ0KDQoNCiAgICBwdWJsaWMgZnVuIHZvdGVDb3VudChzdG9yZV9hZGRyOiBhZGRyZXNzKTp1NjQgYWNxdWlyZXMgUG9sbHsNCiAgICAgICAgbGV0IG9wX3N0b3JlID0gYm9ycm93X2dsb2JhbF9tdXQ8UG9sbD4oc3RvcmVfYWRkcik7DQogICAgICAgIHJldHVybiBvcF9zdG9yZS50b3RhbFZvdGVzDQogICAgfQ0KDQogICAgI1t0ZXN0KGFkbWluID0gQG15X2FkZHJ4KV0NCiAgICBmdW4gdGVzdF9mbG93KGFkbWluOiBzaWduZXIpYWNxdWlyZXMgUG9sbCB7DQogICAgICAgIGxldCBvd25lciA9IHNpZ25lcjo6YWRkcmVzc19vZigmYWRtaW4pOw0KICAgICAgICBsZXQgdm90ZXIgPSBhY2NvdW50OjpjcmVhdGVfYWNjb3VudF9mb3JfdGVzdChAMHgzKTsNCiAgICAgICAgbGV0IHZvdGVyMiA9IGFjY291bnQ6OmNyZWF0ZV9hY2NvdW50X2Zvcl90ZXN0KEAweDQpOw0KICAgICAgICBsZXQgdm90ZXIzID0gYWNjb3VudDo6Y3JlYXRlX2FjY291bnRfZm9yX3Rlc3QoQDB4NSk7DQogICAgICAgIGxldCB2b3RlcjQgPSBhY2NvdW50OjpjcmVhdGVfYWNjb3VudF9mb3JfdGVzdChAMHg2KTsNCiAgICAgICAgbGV0IHZvdGVyNSA9IGFjY291bnQ6OmNyZWF0ZV9hY2NvdW50X2Zvcl90ZXN0KEAweDcpOw0KICAgICAgICBsZXQgZ3JlZXQ6dmVjdG9yPHU4PiA9IGIiV2VsY29tZSB0byBBcHRvcyBtb3ZlIGJ5IGV4YW1wbGVzIjsgDQogICAgICAgIGluaXRpYWxpemUoJmFkbWluLCBncmVldCk7DQogICAgICAgIHZvdGUoJnZvdGVyLG93bmVyLCB0cnVlKTsNCiAgICAgICAgdm90ZSgmdm90ZXIyLG93bmVyLCBmYWxzZSk7DQogICAgICAgIHZvdGUoJnZvdGVyMyxvd25lciwgZmFsc2UpOw0KICAgICAgICB2b3RlKCZ2b3RlcjQsb3duZXIsIGZhbHNlKTsNCiAgICAgICAgdm90ZSgmdm90ZXI1LG93bmVyLCB0cnVlKTsNCiAgICAgICAgLy8gdm90ZSgmdm90ZXI1LG93bmVyLCB0cnVlKTsgLy9USFJPVyBFUlJPUiBCRUNBVVNFIFdFIFRSWUlORyBUTyBBREQgT1VSIFZPVEUgU0VDT05EIFRJTUUNCiAgICAgICAgbGV0IHZhbHVlID0gY3VycmVudFN0YW5kaW5ncyhvd25lcik7IC8vaXRzIGdpdmluZyB3cm9uZyB2YWx1ZQ0KICAgICAgICBsZXQgdG90b2x2b3RlcyA9IHZvdGVDb3VudChvd25lcik7DQogICAgICAgIHN0ZDo6ZGVidWc6OnByaW50KCZ2YWx1ZSk7DQogICAgICAgIGFzc2VydCEodmFsdWUgPT0gNDAsMCk7DQogICAgICAgIGFzc2VydCEodG90b2x2b3RlcyA9PSA1LDApOw0KDQogICAgfQ0KDQoNCn0="
            },
            {
                "file_name": "todo.move",
                "source_code": "DQoNCm1vZHVsZSBhcHRvc19leGFtcGxlOjphcHRvc190b2RvIHsNCiAgICANCiAgICB1c2UgYXB0b3NfZnJhbWV3b3JrOjpldmVudDsNCiAgICB1c2Ugc3RkOjpzaWduZXI7DQogICAgdXNlIGFwdG9zX3N0ZDo6dGFibGU6OntTZWxmLCBUYWJsZX07IA0KICAgIHVzZSBhcHRvc19mcmFtZXdvcms6OmFjY291bnQ7DQogICAgdXNlIHN0ZDo6c3RyaW5nOjpTdHJpbmc7IA0KDQoNCiAgICAvLyBFcnJvcnMNCiAgICBjb25zdCBFX05PVF9JTklUSUFMSVpFRDogdTY0ID0gMTsNCiAgICBjb25zdCBFVEFTS19ET0VTTlRfRVhJU1Q6IHU2NCA9IDI7DQogICAgY29uc3QgRVRBU0tfSVNfQ09NUExFVEVEOiB1NjQgPSAzOw0KDQogICAgc3RydWN0IFRvZG9MaXN0IGhhcyBrZXkgew0KICAgICAgICB0YXNrczogVGFibGU8dTY0LCBUYXNrPiwNCiAgICAgICAgc2V0X3Rhc2tfZXZlbnQ6IGV2ZW50OjpFdmVudEhhbmRsZTxUYXNrPiwNCiAgICAgICAgdGFza19jb3VudGVyOiB1NjQNCiAgICB9DQoNCiAgICBzdHJ1Y3QgVGFzayBoYXMgc3RvcmUsIGRyb3AsIGNvcHkgew0KICAgICAgICB0YXNrX2lkOiB1NjQsDQogICAgICAgIGFkZHJlc3M6YWRkcmVzcywNCiAgICAgICAgY29udGVudDogU3RyaW5nLA0KICAgICAgICBjb21wbGV0ZWQ6IGJvb2wsDQogICAgfQ0KDQogICAgcHVibGljIGVudHJ5IGZ1biBjcmVhdGVfbGlzdChhY2NvdW50OiAmc2lnbmVyKXsNCiAgICAgICAgbGV0IHRhc2tzX2hvbGRlciA9IFRvZG9MaXN0IHsNCiAgICAgICAgICAgIHRhc2tzOiB0YWJsZTo6bmV3KCksDQogICAgICAgICAgICBzZXRfdGFza19ldmVudDogYWNjb3VudDo6bmV3X2V2ZW50X2hhbmRsZTxUYXNrPihhY2NvdW50KSwNCiAgICAgICAgICAgIHRhc2tfY291bnRlcjogMA0KICAgICAgICB9Ow0KICAgICAgICAvLyBtb3ZlIHRoZSBUb2RvTGlzdCByZXNvdXJjZSB1bmRlciB0aGUgc2lnbmVyIGFjY291bnQNCiAgICAgICAgbW92ZV90byhhY2NvdW50LCB0YXNrc19ob2xkZXIpOw0KICAgIH0NCg0KICAgIHB1YmxpYyBlbnRyeSBmdW4gY3JlYXRlX3Rhc2soYWNjb3VudDogJnNpZ25lciwgY29udGVudDogU3RyaW5nKSBhY3F1aXJlcyBUb2RvTGlzdCB7DQogICAgICAgIC8vIGdldHMgdGhlIHNpZ25lciBhZGRyZXNzDQogICAgICAgIGxldCBzaWduZXJfYWRkcmVzcyA9IHNpZ25lcjo6YWRkcmVzc19vZihhY2NvdW50KTsNCiAgICAgICAgLy8gZ2V0cyB0aGUgVG9kb0xpc3QgcmVzb3VyY2UNCiAgICAgICAgYXNzZXJ0IShleGlzdHM8VG9kb0xpc3Q+KHNpZ25lcl9hZGRyZXNzKSwgRV9OT1RfSU5JVElBTElaRUQpOw0KDQogICAgICAgIGxldCB0b2RvX2xpc3QgPSBib3Jyb3dfZ2xvYmFsX211dDxUb2RvTGlzdD4oc2lnbmVyX2FkZHJlc3MpOw0KICAgICAgICAvLyBpbmNyZW1lbnQgdGFzayBjb3VudGVyDQogICAgICAgIGxldCBjb3VudGVyID0gdG9kb19saXN0LnRhc2tfY291bnRlciArIDE7DQogICAgICAgIC8vIGNyZWF0ZXMgYSBuZXcgVGFzaw0KICAgICAgICBsZXQgbmV3X3Rhc2sgPSBUYXNrIHsNCiAgICAgICAgICB0YXNrX2lkOiBjb3VudGVyLA0KICAgICAgICAgIGFkZHJlc3M6IHNpZ25lcl9hZGRyZXNzLA0KICAgICAgICAgIGNvbnRlbnQsDQogICAgICAgICAgY29tcGxldGVkOiBmYWxzZQ0KICAgICAgICB9Ow0KICAgICAgICAvLyBhZGRzIHRoZSBuZXcgdGFzayBpbnRvIHRoZSB0YXNrcyB0YWJsZQ0KICAgICAgICB0YWJsZTo6dXBzZXJ0KCZtdXQgdG9kb19saXN0LnRhc2tzLCBjb3VudGVyLCBuZXdfdGFzayk7DQogICAgICAgIC8vIHNldHMgdGhlIHRhc2sgY291bnRlciB0byBiZSB0aGUgaW5jcmVtZW50ZWQgY291bnRlcg0KICAgICAgICB0b2RvX2xpc3QudGFza19jb3VudGVyID0gY291bnRlcjsNCiAgICAgICAgLy8gZmlyZXMgYSBuZXcgdGFzayBjcmVhdGVkIGV2ZW50DQogICAgICAgIGV2ZW50OjplbWl0X2V2ZW50PFRhc2s+KA0KICAgICAgICAgICZtdXQgYm9ycm93X2dsb2JhbF9tdXQ8VG9kb0xpc3Q+KHNpZ25lcl9hZGRyZXNzKS5zZXRfdGFza19ldmVudCwNCiAgICAgICAgICBuZXdfdGFzaywNCiAgICAgICAgKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgZW50cnkgZnVuIGNvbXBsZXRlX3Rhc2soYWNjb3VudDogJnNpZ25lciwgdGFza19pZDogdTY0KSBhY3F1aXJlcyBUb2RvTGlzdCB7DQogICAgICAgIC8vIGdldHMgdGhlIHNpZ25lciBhZGRyZXNzDQogICAgICAgIGxldCBzaWduZXJfYWRkcmVzcyA9IHNpZ25lcjo6YWRkcmVzc19vZihhY2NvdW50KTsNCiAgICAgICAgLy8gYXNzZXJ0IHNpZ25lciBoYXMgY3JlYXRlZCBhIGxpc3QNCiAgICAgICAgYXNzZXJ0IShleGlzdHM8VG9kb0xpc3Q+KHNpZ25lcl9hZGRyZXNzKSwgRV9OT1RfSU5JVElBTElaRUQpOw0KICAgICAgICAvLyBnZXRzIHRoZSBUb2RvTGlzdCByZXNvdXJjZQ0KICAgICAgICBsZXQgdG9kb19saXN0ID0gYm9ycm93X2dsb2JhbF9tdXQ8VG9kb0xpc3Q+KHNpZ25lcl9hZGRyZXNzKTsNCiAgICAgICAgLy8gYXNzZXJ0IHRhc2sgZXhpc3RzDQogICAgICAgIGFzc2VydCEodGFibGU6OmNvbnRhaW5zKCZ0b2RvX2xpc3QudGFza3MsIHRhc2tfaWQpLCBFVEFTS19ET0VTTlRfRVhJU1QpOw0KICAgICAgICAvLyBnZXRzIHRoZSB0YXNrIG1hdGNoZWQgdGhlIHRhc2tfaWQNCiAgICAgICAgbGV0IHRhc2tfcmVjb3JkID0gdGFibGU6OmJvcnJvd19tdXQoJm11dCB0b2RvX2xpc3QudGFza3MsIHRhc2tfaWQpOw0KICAgICAgICAvLyBhc3NlcnQgdGFzayBpcyBub3QgY29tcGxldGVkDQogICAgICAgIGFzc2VydCEodGFza19yZWNvcmQuY29tcGxldGVkID09IGZhbHNlLCBFVEFTS19JU19DT01QTEVURUQpOw0KICAgICAgICAvLyB1cGRhdGUgdGFzayBhcyBjb21wbGV0ZWQNCiAgICAgICAgdGFza19yZWNvcmQuY29tcGxldGVkID0gdHJ1ZTsNCiAgICB9DQoNCg0KICAgICNbdGVzdF9vbmx5XQ0KICAgIHVzZSBzdGQ6OnN0cmluZzsNCiAgICAjW3Rlc3QoYWRtaW4gPSBAMHgxMjMpXQ0KICAgIHB1YmxpYyBlbnRyeSBmdW4gdGVzdF9mbG93KGFkbWluOiBzaWduZXIpIGFjcXVpcmVzIFRvZG9MaXN0IHsNCiAgICAgICAgLy8gY3JlYXRlcyBhbiBhZG1pbiBAdG9kb2xpc3RfYWRkciBhY2NvdW50IGZvciB0ZXN0DQogICAgICAgIGFjY291bnQ6OmNyZWF0ZV9hY2NvdW50X2Zvcl90ZXN0KHNpZ25lcjo6YWRkcmVzc19vZigmYWRtaW4pKTsNCiAgICAgICAgLy8gaW5pdGlhbGl6ZSBjb250cmFjdCB3aXRoIGFkbWluIGFjY291bnQNCiAgICAgICAgY3JlYXRlX2xpc3QoJmFkbWluKTsNCg0KICAgICAgICAvLyBjcmVhdGVzIGEgdGFzayBieSB0aGUgYWRtaW4gYWNjb3VudA0KICAgICAgICBjcmVhdGVfdGFzaygmYWRtaW4sIHN0cmluZzo6dXRmOChiIk5ldyBUYXNrIikpOw0KICAgICAgICBsZXQgdGFza19jb3VudCA9IGV2ZW50Ojpjb3VudGVyKCZib3Jyb3dfZ2xvYmFsPFRvZG9MaXN0PihzaWduZXI6OmFkZHJlc3Nfb2YoJmFkbWluKSkuc2V0X3Rhc2tfZXZlbnQpOw0KICAgICAgICBhc3NlcnQhKHRhc2tfY291bnQgPT0gMSwgNCk7DQogICAgICAgIGxldCB0b2RvX2xpc3QgPSBib3Jyb3dfZ2xvYmFsPFRvZG9MaXN0PihzaWduZXI6OmFkZHJlc3Nfb2YoJmFkbWluKSk7DQogICAgICAgIGFzc2VydCEodG9kb19saXN0LnRhc2tfY291bnRlciA9PSAxLCA1KTsNCiAgICAgICAgbGV0IHRhc2tfcmVjb3JkID0gdGFibGU6OmJvcnJvdygmdG9kb19saXN0LnRhc2tzLCB0b2RvX2xpc3QudGFza19jb3VudGVyKTsNCiAgICAgICAgYXNzZXJ0ISh0YXNrX3JlY29yZC50YXNrX2lkID09IDEsIDYpOw0KICAgICAgICBhc3NlcnQhKHRhc2tfcmVjb3JkLmNvbXBsZXRlZCA9PSBmYWxzZSwgNyk7DQogICAgICAgIGFzc2VydCEodGFza19yZWNvcmQuY29udGVudCA9PSBzdHJpbmc6OnV0ZjgoYiJOZXcgVGFzayIpLCA4KTsNCiAgICAgICAgYXNzZXJ0ISh0YXNrX3JlY29yZC5hZGRyZXNzID09IHNpZ25lcjo6YWRkcmVzc19vZigmYWRtaW4pLCA5KTsNCg0KICAgICAgICAvLyB1cGRhdGVzIHRhc2sgYXMgY29tcGxldGVkDQogICAgICAgIGNvbXBsZXRlX3Rhc2soJmFkbWluLCAxKTsNCiAgICAgICAgbGV0IHRvZG9fbGlzdCA9IGJvcnJvd19nbG9iYWw8VG9kb0xpc3Q+KHNpZ25lcjo6YWRkcmVzc19vZigmYWRtaW4pKTsNCiAgICAgICAgbGV0IHRhc2tfcmVjb3JkID0gdGFibGU6OmJvcnJvdygmdG9kb19saXN0LnRhc2tzLCAxKTsNCiAgICAgICAgYXNzZXJ0ISh0YXNrX3JlY29yZC50YXNrX2lkID09IDEsIDEwKTsNCiAgICAgICAgYXNzZXJ0ISh0YXNrX3JlY29yZC5jb21wbGV0ZWQgPT0gdHJ1ZSwgMTEpOw0KICAgICAgICBhc3NlcnQhKHRhc2tfcmVjb3JkLmNvbnRlbnQgPT0gc3RyaW5nOjp1dGY4KGIiTmV3IFRhc2siKSwgMTIpOw0KICAgICAgICBhc3NlcnQhKHRhc2tfcmVjb3JkLmFkZHJlc3MgPT0gc2lnbmVyOjphZGRyZXNzX29mKCZhZG1pbiksIDEzKTsNCiAgICB9DQogICAgI1t0ZXN0KGFkbWluID0gQDB4MTIzKV0NCiAgICAjW2V4cGVjdGVkX2ZhaWx1cmUoYWJvcnRfY29kZSA9IEVfTk9UX0lOSVRJQUxJWkVEKV0NCiAgICBwdWJsaWMgZW50cnkgZnVuIGFjY291bnRfY2FuX25vdF91cGRhdGVfdGFzayhhZG1pbjogc2lnbmVyKSBhY3F1aXJlcyBUb2RvTGlzdCB7DQogICAgICAgIC8vIGNyZWF0ZXMgYW4gYWRtaW4gQHRvZG9saXN0X2FkZHIgYWNjb3VudCBmb3IgdGVzdA0KICAgICAgICBhY2NvdW50OjpjcmVhdGVfYWNjb3VudF9mb3JfdGVzdChzaWduZXI6OmFkZHJlc3Nfb2YoJmFkbWluKSk7DQogICAgICAgIC8vIGFjY291bnQgY2FuIG5vdCB0b2dnbGUgdGFzayBhcyBubyBsaXN0IHdhcyBjcmVhdGVkDQogICAgICAgIGNvbXBsZXRlX3Rhc2soJmFkbWluLCAyKTsNCiAgICB9DQoNCn0="
            },
            {
                "file_name": "voting.move",
                "source_code": ""
            }
        ]
    },
    {
        "project_name": "Example - Sui Move",
        "files": [
            {
                "file_name": "coin.move",
                "source_code": "DQptb2R1bGUgc3VpX2V4YW1wbGU6OnN1aV9jb2luIHsNCg0KICAgIHVzZSBzdGQ6Om9wdGlvbjsNCiAgICB1c2Ugc3VpOjpjb2luOjp7U2VsZiwgQ29pbiwgVHJlYXN1cnlDYXB9Ow0KICAgIHVzZSBzdWk6OnRyYW5zZmVyOw0KICAgIHVzZSBzdWk6OnR4X2NvbnRleHQ6OntTZWxmLCBUeENvbnRleHR9Ow0KDQogICAgc3RydWN0IE1BTkFHRUQgaGFzIGRyb3Age30NCg0KICAgIGZ1biBpbml0KHdpdG5lc3M6IE1BTkFHRUQsIGN0eDogJm11dCBUeENvbnRleHQpIHsNCiAgICAgICAgbGV0ICh0cmVhc3VyeV9jYXAsIG1ldGFkYXRhKSA9IGNvaW46OmNyZWF0ZV9jdXJyZW5jeTxNQU5BR0VEPih3aXRuZXNzLCAyLCBiIk1BTkFHRUQiLCBiIk1ORyIsIGIiIiwgb3B0aW9uOjpub25lKCksIGN0eCk7DQogICAgICAgIHRyYW5zZmVyOjpwdWJsaWNfZnJlZXplX29iamVjdChtZXRhZGF0YSk7DQogICAgICAgIHRyYW5zZmVyOjpwdWJsaWNfdHJhbnNmZXIodHJlYXN1cnlfY2FwLCB0eF9jb250ZXh0OjpzZW5kZXIoY3R4KSkNCiAgICB9DQoNCiAgICBwdWJsaWMgZW50cnkgZnVuIG1pbnQoDQogICAgICAgIHRyZWFzdXJ5X2NhcDogJm11dCBUcmVhc3VyeUNhcDxNQU5BR0VEPiwgYW1vdW50OiB1NjQsIHJlY2lwaWVudDogYWRkcmVzcywgY3R4OiAmbXV0IFR4Q29udGV4dA0KICAgICkgew0KICAgICAgICBjb2luOjptaW50X2FuZF90cmFuc2Zlcih0cmVhc3VyeV9jYXAsIGFtb3VudCwgcmVjaXBpZW50LCBjdHgpDQogICAgfQ0KDQogICAgcHVibGljIGVudHJ5IGZ1biBidXJuKHRyZWFzdXJ5X2NhcDogJm11dCBUcmVhc3VyeUNhcDxNQU5BR0VEPiwgY29pbjogQ29pbjxNQU5BR0VEPikgew0KICAgICAgICBjb2luOjpidXJuKHRyZWFzdXJ5X2NhcCwgY29pbik7DQogICAgfQ0KDQogICAgI1t0ZXN0X29ubHldDQogICAgLy8vIFdyYXBwZXIgb2YgbW9kdWxlIGluaXRpYWxpemVyIGZvciB0ZXN0aW5nDQogICAgcHVibGljIGZ1biB0ZXN0X2luaXQoY3R4OiAmbXV0IFR4Q29udGV4dCkgew0KICAgICAgICBpbml0KE1BTkFHRUQge30sIGN0eCkNCiAgICB9DQoNCn0="
            },
            {
                "file_name": "counter.move",
                "source_code": "DQptb2R1bGUgc3VpX2V4YW1wbGU6OnN1aV9jb3VudGVyIHsNCg0KICAgIHVzZSBzdWk6OnRyYW5zZmVyOw0KICAgIHVzZSBzdWk6Om9iamVjdDo6e1NlbGYsIFVJRH07DQogICAgdXNlIHN1aTo6dHhfY29udGV4dDo6e1NlbGYsIFR4Q29udGV4dH07DQoNCiAgICBzdHJ1Y3QgQ291bnRlciBoYXMga2V5IHsNCiAgICAgICAgaWQ6IFVJRCwNCiAgICAgICAgb3duZXI6IGFkZHJlc3MsDQogICAgICAgIHZhbHVlOiB1NjQNCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuIG93bmVyKGNvdW50ZXI6ICZDb3VudGVyKTogYWRkcmVzcyB7DQogICAgICAgIGNvdW50ZXIub3duZXINCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuIHZhbHVlKGNvdW50ZXI6ICZDb3VudGVyKTogdTY0IHsNCiAgICAgICAgY291bnRlci52YWx1ZQ0KICAgIH0NCg0KICAgIHB1YmxpYyBlbnRyeSBmdW4gY3JlYXRlKGN0eDogJm11dCBUeENvbnRleHQpIHsNCiAgICAgICAgdHJhbnNmZXI6OnNoYXJlX29iamVjdChDb3VudGVyIHsNCiAgICAgICAgICAgIGlkOiBvYmplY3Q6Om5ldyhjdHgpLA0KICAgICAgICAgICAgb3duZXI6IHR4X2NvbnRleHQ6OnNlbmRlcihjdHgpLA0KICAgICAgICAgICAgdmFsdWU6IDANCiAgICAgICAgfSkNCiAgICB9DQoNCiAgICAvLy8gSW5jcmVtZW50IGEgY291bnRlciBieSAxLg0KICAgIHB1YmxpYyBlbnRyeSBmdW4gaW5jcmVtZW50KGNvdW50ZXI6ICZtdXQgQ291bnRlcikgew0KICAgICAgICBjb3VudGVyLnZhbHVlID0gY291bnRlci52YWx1ZSArIDE7DQogICAgfQ0KDQogICAgLy8vIFNldCB2YWx1ZSAob25seSBydW5uYWJsZSBieSB0aGUgQ291bnRlciBvd25lcikNCiAgICBwdWJsaWMgZW50cnkgZnVuIHNldF92YWx1ZShjb3VudGVyOiAmbXV0IENvdW50ZXIsIHZhbHVlOiB1NjQsIGN0eDogJlR4Q29udGV4dCkgew0KICAgICAgICBhc3NlcnQhKGNvdW50ZXIub3duZXIgPT0gdHhfY29udGV4dDo6c2VuZGVyKGN0eCksIDApOw0KICAgICAgICBjb3VudGVyLnZhbHVlID0gdmFsdWU7DQogICAgfQ0KDQogICAgLy8vIEFzc2VydCBhIHZhbHVlIGZvciB0aGUgY291bnRlci4NCiAgICBwdWJsaWMgZW50cnkgZnVuIGFzc2VydF92YWx1ZShjb3VudGVyOiAmQ291bnRlciwgdmFsdWU6IHU2NCkgew0KICAgICAgICBhc3NlcnQhKGNvdW50ZXIudmFsdWUgPT0gdmFsdWUsIDApDQogICAgfQ0KDQp9DQoNCiNbdGVzdF9vbmx5XQ0KbW9kdWxlIGJhc2ljczo6Y291bnRlcl90ZXN0IHsNCiAgICB1c2Ugc3VpOjp0ZXN0X3NjZW5hcmlvOw0KICAgIHVzZSBiYXNpY3M6OmNvdW50ZXI7DQoNCiAgICAjW3Rlc3RdDQogICAgZnVuIHRlc3RfY291bnRlcigpIHsNCiAgICAgICAgbGV0IG93bmVyID0gQDB4QzBGRkVFOw0KICAgICAgICBsZXQgdXNlcjEgPSBAMHhBMTsNCg0KICAgICAgICBsZXQgc2NlbmFyaW9fdmFsID0gdGVzdF9zY2VuYXJpbzo6YmVnaW4odXNlcjEpOw0KICAgICAgICBsZXQgc2NlbmFyaW8gPSAmbXV0IHNjZW5hcmlvX3ZhbDsNCg0KICAgICAgICB0ZXN0X3NjZW5hcmlvOjpuZXh0X3R4KHNjZW5hcmlvLCBvd25lcik7DQogICAgICAgIHsNCiAgICAgICAgICAgIGNvdW50ZXI6OmNyZWF0ZSh0ZXN0X3NjZW5hcmlvOjpjdHgoc2NlbmFyaW8pKTsNCiAgICAgICAgfTsNCg0KICAgICAgICB0ZXN0X3NjZW5hcmlvOjpuZXh0X3R4KHNjZW5hcmlvLCB1c2VyMSk7DQogICAgICAgIHsNCiAgICAgICAgICAgIGxldCBjb3VudGVyX3ZhbCA9IHRlc3Rfc2NlbmFyaW86OnRha2Vfc2hhcmVkPGNvdW50ZXI6OkNvdW50ZXI+KHNjZW5hcmlvKTsNCiAgICAgICAgICAgIGxldCBjb3VudGVyID0gJm11dCBjb3VudGVyX3ZhbDsNCg0KICAgICAgICAgICAgYXNzZXJ0IShjb3VudGVyOjpvd25lcihjb3VudGVyKSA9PSBvd25lciwgMCk7DQogICAgICAgICAgICBhc3NlcnQhKGNvdW50ZXI6OnZhbHVlKGNvdW50ZXIpID09IDAsIDEpOw0KDQogICAgICAgICAgICBjb3VudGVyOjppbmNyZW1lbnQoY291bnRlcik7DQogICAgICAgICAgICBjb3VudGVyOjppbmNyZW1lbnQoY291bnRlcik7DQogICAgICAgICAgICBjb3VudGVyOjppbmNyZW1lbnQoY291bnRlcik7DQogICAgICAgICAgICB0ZXN0X3NjZW5hcmlvOjpyZXR1cm5fc2hhcmVkKGNvdW50ZXJfdmFsKTsNCiAgICAgICAgfTsNCg0KICAgICAgICB0ZXN0X3NjZW5hcmlvOjpuZXh0X3R4KHNjZW5hcmlvLCBvd25lcik7DQogICAgICAgIHsNCiAgICAgICAgICAgIGxldCBjb3VudGVyX3ZhbCA9IHRlc3Rfc2NlbmFyaW86OnRha2Vfc2hhcmVkPGNvdW50ZXI6OkNvdW50ZXI+KHNjZW5hcmlvKTsNCiAgICAgICAgICAgIGxldCBjb3VudGVyID0gJm11dCBjb3VudGVyX3ZhbDsNCg0KICAgICAgICAgICAgYXNzZXJ0IShjb3VudGVyOjpvd25lcihjb3VudGVyKSA9PSBvd25lciwgMCk7DQogICAgICAgICAgICBhc3NlcnQhKGNvdW50ZXI6OnZhbHVlKGNvdW50ZXIpID09IDMsIDEpOw0KDQogICAgICAgICAgICBjb3VudGVyOjpzZXRfdmFsdWUoY291bnRlciwgMTAwLCB0ZXN0X3NjZW5hcmlvOjpjdHgoc2NlbmFyaW8pKTsNCg0KICAgICAgICAgICAgdGVzdF9zY2VuYXJpbzo6cmV0dXJuX3NoYXJlZChjb3VudGVyX3ZhbCk7DQogICAgICAgIH07DQoNCiAgICAgICAgdGVzdF9zY2VuYXJpbzo6bmV4dF90eChzY2VuYXJpbywgdXNlcjEpOw0KICAgICAgICB7DQogICAgICAgICAgICBsZXQgY291bnRlcl92YWwgPSB0ZXN0X3NjZW5hcmlvOjp0YWtlX3NoYXJlZDxjb3VudGVyOjpDb3VudGVyPihzY2VuYXJpbyk7DQogICAgICAgICAgICBsZXQgY291bnRlciA9ICZtdXQgY291bnRlcl92YWw7DQoNCiAgICAgICAgICAgIGFzc2VydCEoY291bnRlcjo6b3duZXIoY291bnRlcikgPT0gb3duZXIsIDApOw0KICAgICAgICAgICAgYXNzZXJ0IShjb3VudGVyOjp2YWx1ZShjb3VudGVyKSA9PSAxMDAsIDEpOw0KDQogICAgICAgICAgICBjb3VudGVyOjppbmNyZW1lbnQoY291bnRlcik7DQoNCiAgICAgICAgICAgIGFzc2VydCEoY291bnRlcjo6dmFsdWUoY291bnRlcikgPT0gMTAxLCAyKTsNCg0KICAgICAgICAgICAgdGVzdF9zY2VuYXJpbzo6cmV0dXJuX3NoYXJlZChjb3VudGVyX3ZhbCk7DQogICAgICAgIH07DQoNCiAgICAgICAgdGVzdF9zY2VuYXJpbzo6ZW5kKHNjZW5hcmlvX3ZhbCk7DQogICAgfQ0KDQp9"
            },
            {
                "file_name": "hello_world.move",
                "source_code": "bW9kdWxlIHN1aV9leGFtcGxlOjpzdWlfaGVsbG9fd29ybGQgew0KDQogICAgdXNlIHN0ZDo6c3RyaW5nOw0KICAgIHVzZSBzdWk6Om9iamVjdDo6e1NlbGYsIFVJRH07DQogICAgdXNlIHN1aTo6dHJhbnNmZXI7DQogICAgdXNlIHN1aTo6dHhfY29udGV4dDo6e1NlbGYsIFR4Q29udGV4dH07DQoNCiAgICBzdHJ1Y3QgSGVsbG9Xb3JsZE9iamVjdCBoYXMga2V5LCBzdG9yZSB7DQogICAgICAgIGlkOiBVSUQsDQogICAgICAgIHRleHQ6IHN0cmluZzo6U3RyaW5nDQogICAgfQ0KDQogICAgcHVibGljIGVudHJ5IGZ1biBtaW50KGN0eDogJm11dCBUeENvbnRleHQpIHsNCiAgICAgICAgbGV0IG9iamVjdCA9IEhlbGxvV29ybGRPYmplY3Qgew0KICAgICAgICAgICAgaWQ6IG9iamVjdDo6bmV3KGN0eCksDQogICAgICAgICAgICB0ZXh0OiBzdHJpbmc6OnV0ZjgoYiJIZWxsbyBXb3JsZCEiKQ0KICAgICAgICB9Ow0KICAgICAgICB0cmFuc2Zlcjo6cHVibGljX3RyYW5zZmVyKG9iamVjdCwgdHhfY29udGV4dDo6c2VuZGVyKGN0eCkpOw0KICAgIH0NCg0KfQ=="
            },
            {
                "file_name": "sui_nft.move",
                "source_code": "DQptb2R1bGUgc3VpX2V4YW1wbGU6OnN1aV9uZnQgew0KICAgIA0KICAgIHVzZSBzdWk6OnVybDo6e1NlbGYsIFVybH07DQogICAgdXNlIHN0ZDo6c3RyaW5nOw0KICAgIHVzZSBzdWk6Om9iamVjdDo6e1NlbGYsIElELCBVSUR9Ow0KICAgIHVzZSBzdWk6OmV2ZW50Ow0KICAgIHVzZSBzdWk6OnRyYW5zZmVyOw0KICAgIHVzZSBzdWk6OnR4X2NvbnRleHQ6OntTZWxmLCBUeENvbnRleHR9Ow0KDQogICAgc3RydWN0IERldk5ldE5GVCBoYXMga2V5LCBzdG9yZSB7DQogICAgICAgIGlkOiBVSUQsDQogICAgICAgIG5hbWU6IHN0cmluZzo6U3RyaW5nLA0KICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nOjpTdHJpbmcsDQogICAgICAgIHVybDogVXJsLA0KICAgIH0NCg0KICAgIHN0cnVjdCBNaW50TkZURXZlbnQgaGFzIGNvcHksIGRyb3Agew0KICAgICAgICBvYmplY3RfaWQ6IElELA0KICAgICAgICBjcmVhdG9yOiBhZGRyZXNzLA0KICAgICAgICBuYW1lOiBzdHJpbmc6OlN0cmluZywNCiAgICB9DQoNCiAgICBwdWJsaWMgZW50cnkgZnVuIG1pbnQoDQogICAgICAgIG5hbWU6IHZlY3Rvcjx1OD4sDQogICAgICAgIGRlc2NyaXB0aW9uOiB2ZWN0b3I8dTg+LA0KICAgICAgICB1cmw6IHZlY3Rvcjx1OD4sDQogICAgICAgIGN0eDogJm11dCBUeENvbnRleHQNCiAgICApIHsNCg0KICAgICAgICBsZXQgbmZ0ID0gRGV2TmV0TkZUIHsNCiAgICAgICAgICAgIGlkOiBvYmplY3Q6Om5ldyhjdHgpLA0KICAgICAgICAgICAgbmFtZTogc3RyaW5nOjp1dGY4KG5hbWUpLA0KICAgICAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZzo6dXRmOChkZXNjcmlwdGlvbiksDQogICAgICAgICAgICB1cmw6IHVybDo6bmV3X3Vuc2FmZV9mcm9tX2J5dGVzKHVybCkNCiAgICAgICAgfTsNCg0KICAgICAgICBsZXQgc2VuZGVyID0gdHhfY29udGV4dDo6c2VuZGVyKGN0eCk7DQoNCiAgICAgICAgZXZlbnQ6OmVtaXQoTWludE5GVEV2ZW50IHsNCiAgICAgICAgICAgIG9iamVjdF9pZDogb2JqZWN0Ojp1aWRfdG9faW5uZXIoJm5mdC5pZCksDQogICAgICAgICAgICBjcmVhdG9yOiBzZW5kZXIsDQogICAgICAgICAgICBuYW1lOiBuZnQubmFtZSwNCiAgICAgICAgfSk7DQoNCiAgICAgICAgdHJhbnNmZXI6OnB1YmxpY190cmFuc2ZlcihuZnQsIHNlbmRlcik7DQogICAgfQ0KDQogICAgcHVibGljIGVudHJ5IGZ1biB1cGRhdGVfZGVzY3JpcHRpb24oDQogICAgICAgIG5mdDogJm11dCBEZXZOZXRORlQsDQogICAgICAgIG5ld19kZXNjcmlwdGlvbjogdmVjdG9yPHU4PiwNCiAgICApIHsNCiAgICAgICAgbmZ0LmRlc2NyaXB0aW9uID0gc3RyaW5nOjp1dGY4KG5ld19kZXNjcmlwdGlvbikNCiAgICB9DQoNCiAgICBwdWJsaWMgZW50cnkgZnVuIGJ1cm4obmZ0OiBEZXZOZXRORlQpIHsNCiAgICAgICAgbGV0IERldk5ldE5GVCB7IGlkLCBuYW1lOiBfLCBkZXNjcmlwdGlvbjogXywgdXJsOiBffSA9IG5mdDsNCiAgICAgICAgb2JqZWN0OjpkZWxldGUoaWQpDQogICAgfQ0KDQogICAgcHVibGljIGZ1biBuYW1lKG5mdDogJkRldk5ldE5GVCk6ICZzdHJpbmc6OlN0cmluZyB7DQogICAgICAgICZuZnQubmFtZQ0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW4gZGVzY3JpcHRpb24obmZ0OiAmRGV2TmV0TkZUKTogJnN0cmluZzo6U3RyaW5nIHsNCiAgICAgICAgJm5mdC5kZXNjcmlwdGlvbg0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW4gdXJsKG5mdDogJkRldk5ldE5GVCk6ICZVcmwgew0KICAgICAgICAmbmZ0LnVybA0KICAgIH0NCg0KDQp9"
            }
        ]
    }
]